#
# Copyright (c) 2015 Google, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
# 3. Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# For a description of the syntax of this configuration file,
# see misc/tools/kconfig-language.txt.
#

choice
	prompt "Select STM32L4 Chip"
	default ARCH_CHIP_STM32L476MG
	depends on ARCH_CHIP_STM32


config ARCH_CHIP_STM32L431KB
        bool "STM32L431KB"
        select STM32L4
        select STM32_STM32L4X3
        select STM32_HAVE_32PINS
        select STM32_HAVE_FLASH_128
        select STM32_HAVE_SRAM_64
        ---help---
              32-pin, 128KB FLASH, 64KB SRAM

config ARCH_CHIP_STM32L431KC
        bool "STM32L431KC"
        select STM32L4
        select STM32_STM32L4X3
        select STM32_HAVE_32PINS
        select STM32_HAVE_FLASH_256
        select STM32_HAVE_SRAM_64
        ---help---
                32-pin, 256KB FLASH, 64KB SRAM

config ARCH_CHIP_STM32L431CB
        bool "STM32L431CB"
        select STM32L4
        select STM32_STM32L4X3
        select STM32_HAVE_48PINS
        select STM32_HAVE_FLASH_128
        select STM32_HAVE_SRAM_64
        select STM32_HAVE_USART3
        select STM32_HAVE_SPI3
        select STM32_HAVE_I2C3
        ---help---
                48-pin, 128KB FLASH, 64KB SRAM

config ARCH_CHIP_STM32L431CC
        bool "STM32L431CC"
        select STM32L4
        select STM32_STM32L4X3
        select STM32_HAVE_48PINS
        select STM32_HAVE_FLASH_256
        select STM32_HAVE_SRAM_64
        select STM32_HAVE_USART3
        select STM32_HAVE_SPI3
        select STM32_HAVE_I2C3
        ---help---
                48-pin, 256KB FLASH, 64KB SRAM

config ARCH_CHIP_STM32L431RB
        bool "STM32L431RB"
        select STM32L4
        select STM32_STM32L4X3
        select STM32_HAVE_64PINS
        select STM32_HAVE_FLASH_128
        select STM32_HAVE_SRAM_64
        select STM32_HAVE_USART3
        select STM32_HAVE_SPI3
        select STM32_HAVE_I2C3
        select STM32_HAVE_SDMMC
        ---help---
                64-pin, 128KB FLASH, 64KB SRAM

config ARCH_CHIP_STM32L431RC
        bool "STM32L431RC"
        select STM32L4
        select STM32_STM32L4X3
        select STM32_HAVE_64PINS
        select STM32_HAVE_FLASH_256
        select STM32_HAVE_SRAM_64
        select STM32_HAVE_USART3
        select STM32_HAVE_SPI3
        select STM32_HAVE_I2C3
        select STM32_HAVE_SDMMC
        ---help---
                64-pin, 256KB FLASH, 64KB SRAM

config ARCH_CHIP_STM32L431RE
        bool "STM32L431RE"
        select STM32L4
        select STM32_STM32L4X3
        select STM32_HAVE_64PINS
        select STM32_HAVE_FLASH_512
        select STM32_HAVE_SRAM_64
        select STM32_HAVE_USART3
        select STM32_HAVE_SPI3
        select STM32_HAVE_I2C3
        select STM32_HAVE_SDMMC
        ---help---
                64-pin, 512KB FLASH, 64KB SRAM

config ARCH_CHIP_STM32L431RG
        bool "STM32L431RG"
        select STM32L4
        select STM32_STM32L4X3
        select STM32_HAVE_64PINS
        select STM32_HAVE_FLASH_1024
        select STM32_HAVE_SRAM_64
        select STM32_HAVE_USART3
        select STM32_HAVE_SPI3
        select STM32_HAVE_I2C3
        select STM32_HAVE_SDMMC
        ---help---
                64-pin, 1024KB FLASH, 64B SRAM

config ARCH_CHIP_STM32L431VC
        bool "STM32L431VC"
        select STM32L4
        select STM32_STM32L4X3
        select STM32_HAVE_100PINS
        select STM32_HAVE_FLASH_256
        select STM32_HAVE_SRAM_64
        select STM32_HAVE_USART3
        select STM32_HAVE_SPI3
        select STM32_HAVE_I2C3
        select STM32_HAVE_SDMMC
        ---help---
                100-pin, 256KB FLASH, 64KB SRAM

config ARCH_CHIP_STM32L431VE
        bool "STM32L431VE"
        select STM32L4
        select STM32_STM32L4X3
        select STM32_HAVE_100PINS
        select STM32_HAVE_FLASH_512
        select STM32_HAVE_SRAM_64
        select STM32_HAVE_USART3
        select STM32_HAVE_SPI3
        select STM32_HAVE_I2C3
        select STM32_HAVE_SDMMC
        ---help---
                100-pin, 512KB FLASH, 64KB SRAM

config ARCH_CHIP_STM32L431VG
        bool "STM32L431VG"
        select STM32L4
        select STM32_STM32L4X3
        select STM32_HAVE_100PINS
        select STM32_HAVE_FLASH_1024
        select STM32_HAVE_SRAM_64
        select STM32_HAVE_USART3
        select STM32_HAVE_SPI3
        select STM32_HAVE_I2C3
        select STM32_HAVE_SDMMC
        ---help---
                100-pin, 1024KB FLASH, 64KB SRAM

config ARCH_CHIP_STM32L433CB
        bool "STM32L433CB"
        select STM32L4
        select STM32_STM32L4X3
        select STM32_HAVE_48PINS
        select STM32_HAVE_FLASH_128
        select STM32_HAVE_SRAM_64
        select STM32_HAVE_LCD
        select STM32_HAVE_USBFS
        select STM32_HAVE_USART3
        select STM32_HAVE_SPI3
        select STM32_HAVE_I2C3
        ---help---
                48-pin, 128KB FLASH, 64KB SRAM

config ARCH_CHIP_STM32L433CC
        bool "STM32L433CC"
        select STM32L4
        select STM32_STM32L4X3
        select STM32_HAVE_48PINS
        select STM32_HAVE_FLASH_256
        select STM32_HAVE_SRAM_64
        select STM32_HAVE_LCD
        select STM32_HAVE_USBFS
        select STM32_HAVE_USART3
        select STM32_HAVE_SPI3
        select STM32_HAVE_I2C3
        ---help---
                48-pin, 256KB FLASH, 64KB SRAM

config ARCH_CHIP_STM32L433RB
        bool "STM32L433RB"
        select STM32L4
        select STM32_STM32L4X3
        select STM32_HAVE_64PINS
        select STM32_HAVE_FLASH_128
        select STM32_HAVE_SRAM_64
        select STM32_HAVE_LCD
        select STM32_HAVE_USBFS
        select STM32_HAVE_USART3
        select STM32_HAVE_SPI3
        select STM32_HAVE_I2C3
        select STM32_HAVE_SDMMC
        ---help---
                64-pin, 128KB FLASH, 64KB SRAM

config ARCH_CHIP_STM32L433RC
        bool "STM32L433RC"
        select STM32L4
        select STM32_STM32L4X3
        select STM32_HAVE_64PINS
        select STM32_HAVE_FLASH_256
        select STM32_HAVE_SRAM_64
        select STM32_HAVE_LCD
        select STM32_HAVE_USBFS
        select STM32_HAVE_USART3
        select STM32_HAVE_SPI3
        select STM32_HAVE_I2C3
        select STM32_HAVE_SDMMC
        ---help---
                64-pin, 256KB FLASH, 64KB SRAM

config ARCH_CHIP_STM32L433VC
        bool "STM32L433VC"
        select STM32L4
        select STM32_STM32L4X3
        select STM32_HAVE_100PINS
        select STM32_HAVE_FLASH_256
        select STM32_HAVE_SRAM_64
        select STM32_HAVE_LCD
        select STM32_HAVE_USBFS
        select STM32_HAVE_USART3
        select STM32_HAVE_SPI3
        select STM32_HAVE_I2C3
        select STM32_HAVE_SDMMC
        ---help---
                100-pin, 256KB FLASH, 64KB SRAM

config ARCH_CHIP_STM32L476RC
        bool "STM32L476RC"
        select STM32L4
        select STM32_STM32L4X6
        select STM32_HAVE_64PINS
        select STM32_HAVE_FLASH_256
        select STM32_HAVE_SRAM_128
        select STM32_HAVE_LCD
        select STM32_HAVE_TIM3
        select STM32_HAVE_TIM4
        select STM32_HAVE_TIM5
        select STM32_HAVE_TIM8
        select STM32_HAVE_TIM17
        select STM32_HAVE_OTGFS
        select STM32_HAVE_USART3
        select STM32_HAVE_USART4
        select STM32_HAVE_USART5
        select STM32_HAVE_ADC2
        select STM32_HAVE_SAI2
        select STM32_HAVE_SPI3
        select STM32_HAVE_I2C3
        select STM32_HAVE_SDMMC
        select STM32_HAVE_OPAMP2
        ---help---
                64-pin, 256KB FLASH, 128KB SRAM

config ARCH_CHIP_STM32L476RE
        bool "STM32L476RE"
        select STM32L4
        select STM32_STM32L4X6
        select STM32_HAVE_64PINS
        select STM32_HAVE_FLASH_512
        select STM32_HAVE_SRAM_128
        select STM32_HAVE_LCD
        select STM32_HAVE_TIM3
        select STM32_HAVE_TIM4
        select STM32_HAVE_TIM5
        select STM32_HAVE_TIM8
        select STM32_HAVE_TIM17
        select STM32_HAVE_OTGFS
        select STM32_HAVE_USART3
        select STM32_HAVE_USART4
        select STM32_HAVE_USART5
        select STM32_HAVE_ADC2
        select STM32_HAVE_SAI2
        select STM32_HAVE_SPI3
        select STM32_HAVE_I2C3
        select STM32_HAVE_SDMMC
        select STM32_HAVE_OPAMP2
        ---help---
                64-pin, 512KB FLASH, 128KB SRAM

config ARCH_CHIP_STM32L476RG
        bool "STM32L476RG"
        select STM32L4
        select STM32_STM32L4X6
        select STM32_HAVE_64PINS
        select STM32_HAVE_FLASH_1024
        select STM32_HAVE_SRAM_128
        select STM32_HAVE_LCD
        select STM32_HAVE_TIM3
        select STM32_HAVE_TIM4
        select STM32_HAVE_TIM5
        select STM32_HAVE_TIM8
        select STM32_HAVE_TIM17
        select STM32_HAVE_OTGFS
        select STM32_HAVE_USART3
        select STM32_HAVE_USART4
        select STM32_HAVE_USART5
        select STM32_HAVE_ADC2
        select STM32_HAVE_SAI2
        select STM32_HAVE_SPI3
        select STM32_HAVE_I2C3
        select STM32_HAVE_SDMMC
        select STM32_HAVE_OPAMP2
        ---help---
                64-pin, 1024KB FLASH, 128KB SRAM

config ARCH_CHIP_STM32L476JE
        bool "STM32L476JE"
        select STM32L4
        select STM32_STM32L4X6
        select STM32_HAVE_72PINS
        select STM32_HAVE_FLASH_512
        select STM32_HAVE_SRAM_128
        select STM32_HAVE_LCD
        select STM32_HAVE_TIM3
        select STM32_HAVE_TIM4
        select STM32_HAVE_TIM5
        select STM32_HAVE_TIM8
        select STM32_HAVE_TIM17
        select STM32_HAVE_OTGFS
        select STM32_HAVE_USART3
        select STM32_HAVE_USART4
        select STM32_HAVE_USART5
        select STM32_HAVE_ADC2
        select STM32_HAVE_SAI2
        select STM32_HAVE_SPI3
        select STM32_HAVE_I2C3
        select STM32_HAVE_SDMMC
        select STM32_HAVE_OPAMP2
        ---help---
                72-pin, 512KB FLASH, 128KB SRAM

config ARCH_CHIP_STM32L476JG
        bool "STM32L476JG"
        select STM32L4
        select STM32_STM32L4X6
        select STM32_HAVE_72PINS
        select STM32_HAVE_FLASH_1024
        select STM32_HAVE_SRAM_128
        select STM32_HAVE_LCD
        select STM32_HAVE_TIM3
        select STM32_HAVE_TIM4
        select STM32_HAVE_TIM5
        select STM32_HAVE_TIM8
        select STM32_HAVE_TIM17
        select STM32_HAVE_OTGFS
        select STM32_HAVE_USART3
        select STM32_HAVE_USART4
        select STM32_HAVE_USART5
        select STM32_HAVE_ADC2
        select STM32_HAVE_SAI2
        select STM32_HAVE_SPI3
        select STM32_HAVE_I2C3
        select STM32_HAVE_SDMMC
        select STM32_HAVE_OPAMP2
        ---help---
                72-pin, 1024KB FLASH, 128KB SRAM

config ARCH_CHIP_STM32L476ME
        bool "STM32L476ME"
        select STM32L4
        select STM32_STM32L4X6
        select STM32_HAVE_81PINS
        select STM32_HAVE_FLASH_512
        select STM32_HAVE_SRAM_128
        select STM32_HAVE_LCD
        select STM32_HAVE_TIM3
        select STM32_HAVE_TIM4
        select STM32_HAVE_TIM5
        select STM32_HAVE_TIM8
        select STM32_HAVE_TIM17
        select STM32_HAVE_OTGFS
        select STM32_HAVE_USART3
        select STM32_HAVE_USART4
        select STM32_HAVE_USART5
        select STM32_HAVE_ADC2
        select STM32_HAVE_SAI2
        select STM32_HAVE_SPI3
        select STM32_HAVE_I2C3
        select STM32_HAVE_SDMMC
        select STM32_HAVE_OPAMP2
        ---help---
                81-pin, 512KB FLASH, 128KB SRAM

config ARCH_CHIP_STM32L476MG
        bool "STM32L476MG (MDK Version)"
        select STM32L4
        select STM32_STM32L4X6
        select STM32_HAVE_81PINS
        select STM32_HAVE_FLASH_1024
        select STM32_HAVE_SRAM_128
        select STM32_HAVE_LCD
        select STM32_HAVE_TIM3
        select STM32_HAVE_TIM4
        select STM32_HAVE_TIM5
        select STM32_HAVE_TIM8
        select STM32_HAVE_TIM17
        select STM32_HAVE_OTGFS
        select STM32_HAVE_USART3
        select STM32_HAVE_USART4
        select STM32_HAVE_USART5
        select STM32_HAVE_ADC2
        select STM32_HAVE_SAI2
        select STM32_HAVE_SPI3
        select STM32_HAVE_I2C3
        select STM32_HAVE_SDMMC
        select STM32_HAVE_OPAMP2
        ---help---
                81-pin, 1024B FLASH, 128KB SRAM

config ARCH_CHIP_STM32L476VC
        bool "STM32L476VC"
        select STM32L4
        select STM32_STM32L4X6
        select STM32_HAVE_100PINS
        select STM32_HAVE_FLASH_256
        select STM32_HAVE_SRAM_128
        select STM32_HAVE_LCD
        select STM32_HAVE_TIM3
        select STM32_HAVE_TIM4
        select STM32_HAVE_TIM5
        select STM32_HAVE_TIM8
        select STM32_HAVE_TIM17
        select STM32_HAVE_OTGFS
        select STM32_HAVE_USART3
        select STM32_HAVE_USART4
        select STM32_HAVE_USART5
        select STM32_HAVE_ADC2
        select STM32_HAVE_SAI2
        select STM32_HAVE_SPI3
        select STM32_HAVE_I2C3
        select STM32_HAVE_SDMMC
        select STM32_HAVE_OPAMP2
        ---help---
                100-pin, 256KB FLASH, 128KB SRAM

config ARCH_CHIP_STM32L476VE
        bool "STM32L476VE"
        select STM32L4
        select STM32_STM32L4X6
        select STM32_HAVE_100PINS
        select STM32_HAVE_FLASH_512
        select STM32_HAVE_SRAM_128
        select STM32_HAVE_LCD
        select STM32_HAVE_TIM3
        select STM32_HAVE_TIM4
        select STM32_HAVE_TIM5
        select STM32_HAVE_TIM8
        select STM32_HAVE_TIM17
        select STM32_HAVE_OTGFS
        select STM32_HAVE_USART3
        select STM32_HAVE_USART4
        select STM32_HAVE_USART5
        select STM32_HAVE_ADC2
        select STM32_HAVE_SAI2
        select STM32_HAVE_SPI3
        select STM32_HAVE_I2C3
        select STM32_HAVE_SDMMC
        select STM32_HAVE_OPAMP2
        ---help---
                100-pin, 512KB FLASH, 128KB SRAM

config ARCH_CHIP_STM32L476VG
        bool "STM32L476VG"
        select STM32L4
        select STM32_STM32L4X6
        select STM32_HAVE_100PINS
        select STM32_HAVE_FLASH_1024
        select STM32_HAVE_SRAM_128
        select STM32_HAVE_LCD
        select STM32_HAVE_TIM3
        select STM32_HAVE_TIM4
        select STM32_HAVE_TIM5
        select STM32_HAVE_TIM8
        select STM32_HAVE_TIM17
        select STM32_HAVE_OTGFS
        select STM32_HAVE_USART3
        select STM32_HAVE_USART4
        select STM32_HAVE_USART5
        select STM32_HAVE_ADC2
        select STM32_HAVE_SAI2
        select STM32_HAVE_SPI3
        select STM32_HAVE_I2C3
        select STM32_HAVE_SDMMC
        select STM32_HAVE_OPAMP2
        ---help---
                100-pin, 1024KB FLASH, 128KB SRAM

config ARCH_CHIP_STM32L476QE
        bool "STM32L476QE"
        select STM32L4
        select STM32_STM32L4X6
        select STM32_HAVE_132PINS
        select STM32_HAVE_FLASH_512
        select STM32_HAVE_SRAM_128
        select STM32_HAVE_LCD
        select STM32_HAVE_TIM3
        select STM32_HAVE_TIM4
        select STM32_HAVE_TIM5
        select STM32_HAVE_TIM8
        select STM32_HAVE_TIM17
        select STM32_HAVE_OTGFS
        select STM32_HAVE_USART3
        select STM32_HAVE_USART4
        select STM32_HAVE_USART5
        select STM32_HAVE_ADC2
        select STM32_HAVE_ADC3
        select STM32_HAVE_SAI2
        select STM32_HAVE_SPI3
        select STM32_HAVE_I2C3
        select STM32_HAVE_SDMMC
        select STM32_HAVE_OPAMP2
        ---help---
                132-pin, 512KB FLASH, 128KB SRAM

config ARCH_CHIP_STM32L476QG
        bool "STM32L476QG"
        select STM32L4
        select STM32_STM32L4X6
        select STM32_HAVE_132PINS
        select STM32_HAVE_FLASH_512
        select STM32_HAVE_SRAM_128
        select STM32_HAVE_LCD
        select STM32_HAVE_TIM3
        select STM32_HAVE_TIM4
        select STM32_HAVE_TIM5
        select STM32_HAVE_TIM8
        select STM32_HAVE_TIM17
        select STM32_HAVE_OTGFS
        select STM32_HAVE_USART3
        select STM32_HAVE_USART4
        select STM32_HAVE_USART5
        select STM32_HAVE_ADC2
        select STM32_HAVE_ADC3
        select STM32_HAVE_SAI2
        select STM32_HAVE_SPI3
        select STM32_HAVE_I2C3
        select STM32_HAVE_SDMMC
        select STM32_HAVE_OPAMP2
        ---help---
                132-pin, 1024KB FLASH, 128KB SRAM

config ARCH_CHIP_STM32L476ZE
        bool "STM32L476ZE"
        select STM32L4
        select STM32_STM32L4X6
        select STM32_HAVE_144PINS
        select STM32_HAVE_FLASH_512
        select STM32_HAVE_SRAM_128
        select STM32_HAVE_LCD
        select STM32_HAVE_TIM3
        select STM32_HAVE_TIM4
        select STM32_HAVE_TIM5
        select STM32_HAVE_TIM8
        select STM32_HAVE_TIM17
        select STM32_HAVE_OTGFS
        select STM32_HAVE_USART3
        select STM32_HAVE_USART4
        select STM32_HAVE_USART5
        select STM32_HAVE_ADC2
        select STM32_HAVE_ADC3
        select STM32_HAVE_SAI2
        select STM32_HAVE_SPI3
        select STM32_HAVE_I2C3
        select STM32_HAVE_SDMMC
        select STM32_HAVE_OPAMP2
        ---help---
                144pin, 512KB FLASH, 128KB SRAM

config ARCH_CHIP_STM32L476ZG
        bool "STM32L476ZG"
        select STM32L4
        select STM32_STM32L4X6
        select STM32_HAVE_144PINS
        select STM32_HAVE_FLASH_1024
        select STM32_HAVE_SRAM_128
        select STM32_HAVE_LCD
        select STM32_HAVE_TIM3
        select STM32_HAVE_TIM4
        select STM32_HAVE_TIM5
        select STM32_HAVE_TIM8
        select STM32_HAVE_TIM17
        select STM32_HAVE_OTGFS
        select STM32_HAVE_USART3
        select STM32_HAVE_USART4
        select STM32_HAVE_USART5
        select STM32_HAVE_ADC2
        select STM32_HAVE_ADC3
        select STM32_HAVE_SAI2
        select STM32_HAVE_SPI3
        select STM32_HAVE_I2C3
        select STM32_HAVE_SDMMC
        select STM32_HAVE_OPAMP2
        ---help---
                144pin, 1024KB FLASH, 128KB SRAM
endchoice

config STM32L4
        bool
        select STM32_HAVE_ADC1
        select STM32_HAVE_CAN1
        select STM32_HAVE_COMP
        select STM32_HAVE_CORTEXM4
        select STM32_HAVE_CRC
        select STM32_HAVE_DAC1
        select STM32_HAVE_DAC2
        select STM32_HAVE_DMA1
        select STM32_HAVE_FPU
        select STM32_HAVE_MCU
        select STM32_HAVE_FSMC
        select STM32_HAVE_I2C1
        select STM32_HAVE_I2C2
        select STM32_HAVE_IWDG
        select STM32_HAVE_WWDG
        select STM32_HAVE_LPTIM1
        select STM32_HAVE_LPTIM2
        select STM32_HAVE_OPAMP1
        select STM32_HAVE_QUADSPI
        select STM32_HAVE_RNG
        select STM32_HAVE_RTC_SUBSECONDS
        select STM32_HAVE_SAI1
        select STM32_HAVE_SPI1
        select STM32_HAVE_SPI2
        select STM32_HAVE_SWPMI
        select STM32_HAVE_TIM1
        select STM32_HAVE_TIM2
        select STM32_HAVE_TIM6
        select STM32_HAVE_TIM7
        select STM32_HAVE_TIM15
        select STM32_HAVE_TIM16
        select STM32_HAVE_USART1
        select STM32_HAVE_USART2
        select STM32_HAVE_USART6
        select STM32_HAVE_PWR
	select ARCH_HAVE_UID
	select ARCH_HAVE_CHIPID
	select ARCH_HAVE_BOARDID
	select ARCH_HAVE_RESET_FLAGS
	select ARCH_HAVE_PROGMEM

menu "STM32 Peripheral Support"

# These "hidden" settings determine if a peripheral option is available for the selection MCU


config STM32_HAVE_32PINS
	bool
	default n

config STM32_HAVE_48PINS
	bool
	default n

config STM32_HAVE_64PINS
	bool
	default n

config STM32_HAVE_100PINS
	bool
	default n

config STM32_HAVE_72PINS
	bool
	default n

config STM32_HAVE_81PINS
	bool
	default n

config STM32_HAVE_132PINS
	bool
	default n

config STM32_HAVE_144PINS
	bool
	default n

config STM32_HAVE_FSMC
	bool
	default n

config STM32_HAVE_SPI1
	bool
	default n

config STM32_HAVE_SPI2
	bool
	default n

config STM32_HAVE_SPI3
	bool
	default n

config STM32_HAVE_I2C1
	bool
	default n

config STM32_HAVE_I2C2
	bool
	default n

config STM32_HAVE_I2C3
	bool
	default n

config STM32_HAVE_USART1
	bool
	default n

config STM32_HAVE_USART2
	bool
	default n

config STM32_HAVE_USART3
	bool
	default n

config STM32_HAVE_USART4
	bool
	default n

config STM32_HAVE_USART5
	bool
	default n

config STM32_HAVE_USART6
	bool
	default n

config STM32_HAVE_OTGFS
	bool
	default n

config STM32_HAVE_USBFS
	bool
	default n

config STM32_HAVE_TIM1
	bool
	default n

config STM32_HAVE_TIM2
	bool
	default n

config STM32_HAVE_TIM3
	bool
	default n

config STM32_HAVE_TIM4
	bool
	default n

config STM32_HAVE_TIM5
	bool
	default n

config STM32_HAVE_TIM6
	bool
	default n

config STM32_HAVE_TIM7
	bool
	default n

config STM32_HAVE_TIM8
	bool
	default n

config STM32_HAVE_TIM15
	bool
	default n

config STM32_HAVE_TIM16
	bool
	default n

config STM32_HAVE_TIM17
	bool
	default n

config STM32_HAVE_LPTIM1
	bool
	default n

config STM32_HAVE_LPTIM2
	bool
	default n

config STM32_HAVE_ADC1
	bool
	default n

config STM32_HAVE_ADC2
	bool
	default n

config STM32_HAVE_ADC3
	bool
	default n

config STM32_HAVE_CAN1
	bool
	default n

config STM32_HAVE_RNG
	bool
	default n

config STM32_HAVE_ETHMAC
	bool
	default n

config STM32_HAVE_COMP
	bool
	default n

config STM32_HAVE_RTC_SUBSECONDS
	bool
	default n

config STM32_HAVE_SAI1
	bool
	default n

config STM32_HAVE_SAI2
	bool
	default n

config STM32_HAVE_DAC1
	bool
	default n

config STM32_HAVE_DAC2
	bool
	default n

config STM32_STM32L4X6
	bool
	default n

config STM32_STM32L4X3
	bool
	default n

config STM32_STM32L4X1
	bool
	default n

config STM32_HAVE_CORTEXM4
	bool
	default n

config STM32_HAVE_FPU
	bool
	default n

config STM32_HAVE_MCU
	bool
	default n

config STM32_HAVE_CRC
	bool
	default n

config STM32_HAVE_DMA1
	bool
	default n

config STM32_HAVE_FLASH_1024
	bool
	default n

config STM32_HAVE_FLASH_512
	bool
	default n

config STM32_HAVE_FLASH_256
	bool
	default n

config STM32_HAVE_FLASH_128
	bool
	default n

config STM32_HAVE_IWDG
	bool
	default n

config STM32_HAVE_WWDG
	bool
	default n

config STM32_HAVE_LCD
	bool
	default n

config STM32_HAVE_OPAMP1
	bool
	default n

config STM32_HAVE_OPAMP2
	bool
	default n

config STM32_HAVE_QUADSPI
	bool
	default n

config STM32_HAVE_SDMMC
	bool
	default n

config STM32_HAVE_SWPMI
	bool
	default n

config STM32_HAVE_SRAM_128
	bool
	default n

config STM32_HAVE_SRAM_64
	bool
	default n

config STM32_HAVE_PWR
	bool
	default n

# These are the peripheral selections proper

config STM32_ADC1
	bool "ADC1"
	default n
	select STM32_ADC
	depends on STM32_HAVE_ADC1

config STM32_ADC2
	bool "ADC2"
	default n
	select STM32_ADC
	depends on STM32_HAVE_ADC2

config STM32_ADC3
	bool "ADC3"
	default n
	select STM32_ADC
	depends on STM32_HAVE_ADC3

config STM32_ADC_INIT
	bool "ADC Device Initialization"
	default n
	depends on STM32_ADC
	---help---
		Create a /dev/adcX for each ADC device.

if STM32_ADC_INIT
if STM32_ADC1
menu "ADC1 Device Initialization"

config STM32_ADC1_CHAN0_INIT
	bool "ADC1 Channel 0 (IN1-PC0)"
	default n
        depends on STM32_ADC1 && !(STM32_HAVE_48PINS || STM32_HAVE_32PINS)
config STM32_ADC1_CHAN1_INIT
	bool "ADC1 Channel 1 (IN2-PC1)"
	default n
        depends on STM32_ADC1 && !(STM32_HAVE_48PINS || STM32_HAVE_32PINS)
config STM32_ADC1_CHAN2_INIT
	bool "ADC1 Channel 2 (IN3-PC2)"
	default n
        depends on STM32_ADC1 && !(STM32_HAVE_48PINS || STM32_HAVE_32PINS)
config STM32_ADC1_CHAN3_INIT
	bool "ADC1 Channel 3 (IN4-PC3)"
	default n
        depends on STM32_ADC1 && !(STM32_HAVE_48PINS || STM32_HAVE_32PINS)
config STM32_ADC1_CHAN4_INIT
	bool "ADC1 Channel 4 (IN5-PA0)"
	default n
config STM32_ADC1_CHAN5_INIT
	bool "ADC1 Channel 5 (IN6-PA1)"
	default n
config STM32_ADC1_CHAN6_INIT
	bool "ADC1 Channel 6 (IN7-PA2)"
	default n
config STM32_ADC1_CHAN7_INIT
	bool "ADC1 Channel 7 (IN8-PA3)"
	default n
config STM32_ADC1_CHAN8_INIT
	bool "ADC1 Channel 8 (IN9-PA4)"
	default n
config STM32_ADC1_CHAN9_INIT
	bool "ADC1 Channel 9 (IN10-PA5)"
	default n
config STM32_ADC1_CHAN10_INIT
	bool "ADC1 Channel 10 (IN11-PA6)"
	default n
config STM32_ADC1_CHAN11_INIT
	bool "ADC1 Channel 11 (IN12-PA7)"
	default n
config STM32_ADC1_CHAN12_INIT
	bool "ADC1 Channel 12 (IN13-PC4)"
	default n
        depends on STM32_ADC1 && !(STM32_HAVE_48PINS || STM32_HAVE_32PINS)
config STM32_ADC1_CHAN13_INIT
	bool "ADC1 Channel 13 (IN14-PC5)"
	default n
        depends on STM32_ADC1 && !(STM32_HAVE_48PINS || STM32_HAVE_32PINS)
config STM32_ADC1_CHAN14_INIT
	bool "ADC1 Channel 14 (IN15-PB0)"
	default n
config STM32_ADC1_CHAN15_INIT
	bool "ADC1 Channel 15 (IN16-PB1)"
	default n
endmenu
endif
endif

if STM32_ADC_INIT
if STM32_ADC2
menu "ADC2 Device Initialization"

config STM32_ADC2_CHAN0_INIT
	bool "ADC2 Channel 0 (IN1-PC0)"
	default n
config STM32_ADC2_CHAN1_INIT
	bool "ADC2 Channel 1 (IN2-PC1)"
	default n
config STM32_ADC2_CHAN2_INIT
	bool "ADC2 Channel 2 (IN3-PC2)"
	default n
config STM32_ADC2_CHAN3_INIT
	bool "ADC2 Channel 3 (IN4-PC3)"
	default n
config STM32_ADC2_CHAN4_INIT
	bool "ADC2 Channel 4 (IN5-PA0)"
	default n
config STM32_ADC2_CHAN5_INIT
	bool "ADC2 Channel 5 (IN6-PA1)"
	default n
config STM32_ADC2_CHAN6_INIT
	bool "ADC2 Channel 6 (IN7-PA2)"
	default n
config STM32_ADC2_CHAN7_INIT
	bool "ADC2 Channel 7 (IN8-PA3)"
	default n
config STM32_ADC2_CHAN8_INIT
	bool "ADC2 Channel 8 (IN9-PA4)"
	default n
config STM32_ADC2_CHAN9_INIT
	bool "ADC2 Channel 9 (IN10-PA5)"
	default n
config STM32_ADC2_CHAN10_INIT
	bool "ADC2 Channel 10 (IN11-PA6)"
	default n
config STM32_ADC2_CHAN11_INIT
	bool "ADC2 Channel 11 (IN12-PA7)"
	default n
config STM32_ADC2_CHAN12_INIT
	bool "ADC2 Channel 12 (IN13-PC4)"
	default n
config STM32_ADC2_CHAN13_INIT
	bool "ADC2 Channel 13 (IN14-PC5)"
	default n
config STM32_ADC2_CHAN14_INIT
	bool "ADC2 Channel 14 (IN15-PB0)"
	default n
config STM32_ADC2_CHAN15_INIT
	bool "ADC2 Channel 15 (IN16-PB1)"
	default n
endmenu
endif
endif

if STM32_ADC_INIT
if STM32_ADC3
menu "ADC3 Device Initialization"

config STM32_ADC3_CHAN0_INIT
	bool "ADC3 Channel 0 (IN1-PC0)"
	default n
config STM32_ADC3_CHAN1_INIT
	bool "ADC3 Channel 1 (IN2-PC1)"
	default n
config STM32_ADC3_CHAN2_INIT
	bool "ADC3 Channel 2 (IN3-PC2)"
	default n
config STM32_ADC3_CHAN3_INIT
	bool "ADC3 Channel 3 (IN4-PC3)"
	default n
config STM32_ADC3_CHAN5_INIT
	bool "ADC3 Channel 5 (IN6-PF3)"
	default n
config STM32_ADC3_CHAN6_INIT
	bool "ADC3 Channel 6 (IN7-PF4)"
	default n
config STM32_ADC3_CHAN7_INIT
	bool "ADC3 Channel 7 (IN8-PF5)"
	default n
config STM32_ADC3_CHAN8_INIT
	bool "ADC3 Channel 8 (IN9-PF6)"
	default n
        depends on STM32_HAVE_132PINS
config STM32_ADC3_CHAN9_INIT
	bool "ADC3 Channel 9 (IN10-PF7)"
	default n
        depends on STM32_HAVE_132PINS
config STM32_ADC3_CHAN10_INIT
	bool "ADC3 Channel 10 (IN11-PF8)"
	default n
        depends on STM32_HAVE_132PINS
config STM32_ADC3_CHAN11_INIT
	bool "ADC3 Channel 11 (IN12-PF9)"
	default n
        depends on STM32_HAVE_132PINS
config STM32_ADC3_CHAN12_INIT
	bool "ADC3 Channel 12 (IN13-PF10)"
	default n
        depends on STM32_HAVE_132PINS
endmenu
endif
endif

config STM32_COMP
	bool "COMP"
	default n
	depends on STM32_HAVE_COMP

config STM32_CAN1
	bool "CAN"
	default n
	depends on STM32_HAVE_CAN1

config STM32_CRC
	bool "CRC"
	default n
        depends on STM32_HAVE_CRC 

config STM32_DMA1
	bool "DMA"
	default n
        depends on STM32_HAVE_DMA1 
	select ARCH_DMA

config STM32_DAC1
	bool "DAC1"
	default n
        depends on STM32_HAVE_DAC1 

config STM32_DAC2
	bool "DAC2"
	default n
        depends on STM32_HAVE_DAC2 

config STM32_ETHMAC
	bool "Ethernet MAC"
	default n
	depends on STM32_HAVE_ETHMAC
	select NETDEVICES
	select ARCH_HAVE_PHY

config STM32_FSMC
	bool "FSMC"
	default n
	depends on STM32_HAVE_FSMC

config STM32_I2C1
	bool "I2C1"
	default n
        depends on STM32_HAVE_I2C1
	select STM32_I2C

config STM32_I2C2
	bool "I2C2"
	default n
	depends on STM32_HAVE_I2C2
	select STM32_I2C

config STM32_I2C3
	bool "I2C3"
	default n
	depends on  STM32_HAVE_I2C3
	select STM32_I2C

config STM32_OTGFS
	bool "USB OTG FS"
	default n
	depends on STM32_HAVE_OTGFS
        select USBDEV

config STM32_USBFS
	bool "USB FS"
	default n
	depends on STM32_HAVE_USBFS
        select USBDEV

config STM32_PWR
	bool "PWR"
	default n
	depends on STM32_HAVE_PWR

config STM32_RNG
	bool "RNG"
	default n
	depends on STM32_HAVE_RNG
	select ARCH_HAVE_RNG

config STM32_SAI1_A
	bool "SAI1 Block A"
	default n
	select AUDIO
        depends on STM32_HAVE_SAI1
	select I2S
        depends on STM32_HAVE_SAI1
	select SCHED_WORKQUEUE
        depends on STM32_HAVE_SAI1
	select STM32_SAI
        depends on STM32_HAVE_SAI1

config STM32_SAI1_B
	bool "SAI1 Block B"
	default n
	select AUDIO
        depends on STM32_HAVE_SAI1
	select I2S
        depends on STM32_HAVE_SAI1
	select SCHED_WORKQUEUE
        depends on STM32_HAVE_SAI1
	select STM32_SAI
        depends on STM32_HAVE_SAI1

config STM32_SAI2_A
	bool "SAI2 Block A"
	default n
	select AUDIO
        depends on STM32_HAVE_SAI2
	select I2S
        depends on STM32_HAVE_SAI2
	select SCHED_WORKQUEUE
        depends on STM32_HAVE_SAI2
	select STM32_SAI
        depends on STM32_HAVE_SAI2

config STM32_SAI2_B
	bool "SAI2 Block B"
	default n
	select AUDIO
        depends on STM32_HAVE_SAI2
	select I2S
        depends on STM32_HAVE_SAI2
	select SCHED_WORKQUEUE
        depends on STM32_HAVE_SAI2
	select STM32_SAI
        depends on STM32_HAVE_SAI2

config STM32_SDIO
	bool "SDIO"
	default n
	depends on STM32_HAVE_SDMMC

config STM32_SPI1
	bool "SPI1"
	default n
	depends on STM32_HAVE_SPI1
	select SPI
	select STM32_SPI

config STM32_SPI2
	bool "SPI2"
	default n
	depends on STM32_HAVE_SPI2
	select SPI
	select STM32_SPI

config STM32_SPI3
	bool "SPI3"
	default n
	depends on STM32_HAVE_SPI3
	select SPI
	select STM32_SPI

config STM32_SYSCFG
	bool "SYSCFG"
	default y
	depends on STM32_STM32L4X6 || STM32_STM32L4X3 || STM32_STM32L4X1

config STM32_TIM1
	bool "TIM1"
	default n
	depends on STM32_HAVE_TIM1

config STM32_TIM2
	bool "TIM2"
	default n
	depends on STM32_HAVE_TIM2

config STM32_TIM3
	bool "TIM3"
	default n
	depends on STM32_HAVE_TIM3

config STM32_TIM4
	bool "TIM4"
	default n
	depends on STM32_HAVE_TIM4

config STM32_TIM5
	bool "TIM5"
	default n
	depends on STM32_HAVE_TIM5

config STM32_TIM6
	bool "TIM6"
	default n
	depends on STM32_HAVE_TIM6

config STM32_TIM7
	bool "TIM7"
	default n
	depends on STM32_HAVE_TIM7

config STM32_TIM8
	bool "TIM8"
	default n
	depends on STM32_HAVE_TIM8

config STM32_TIM15
	bool "TIM15"
	default n
	depends on STM32_HAVE_TIM15

config STM32_TIM16
	bool "TIM16"
	default n
	depends on STM32_HAVE_TIM16

config STM32_TIM17
	bool "TIM17"
	default n
	depends on STM32_HAVE_TIM17

config STM32_LPTIM1
	bool "LPTIM1"
	default n
	depends on STM32_HAVE_LPTIM1

config STM32_LPTIM2
	bool "LPTIM2"
	default n
	depends on STM32_HAVE_LPTIM2

config STM32_TSC
	bool "TSC"
	default n
	depends on STM32_STM32F30XX

config STM32_USART1
	bool "USART1"
	default n
	depends on STM32_HAVE_USART1
	select ARCH_HAVE_USART1
	select STM32_USART

config STM32_USART2
	bool "USART2"
	default n
	depends on STM32_HAVE_USART2
	select ARCH_HAVE_USART2
	select STM32_USART

config STM32_USART3
	bool "USART3"
	default n
	depends on STM32_HAVE_USART3
	select ARCH_HAVE_USART3
	select STM32_USART

config STM32_USART4
	bool "USART4"
	default n
	depends on STM32_HAVE_USART4
	select ARCH_HAVE_USART4
        select STM32_UART4
	select STM32_USART

config STM32_USART5
	bool "USART5"
	default n
	depends on STM32_HAVE_USART5
	select ARCH_HAVE_USART5
        select STM32_UART5
	select STM32_USART

config STM32_USART6
	bool "USART6"
	default n
	depends on STM32_HAVE_USART6
	select ARCH_HAVE_USART6
	select STM32_USART

config STM32_LCD
	bool "LCD"
	default n
	depends on STM32_HAVE_LCD

config STM32_IWDG
	bool "IWDG"
	default n
        depends on STM32_HAVE_IWDG 
	select WATCHDOG

config STM32_WWDG
	bool "WWDG"
	default n
        depends on STM32_HAVE_WWDG 
	select WATCHDOG

endmenu

config STM32_ADC
	bool

config STM32_DAC
	bool

config STM32_SPI
	bool

config STM32_I2C
	bool

config STM32_PWR
	bool

config STM32_CAN1
	bool

config STM32_OTGFS
	bool

config STM32_SAI
	bool

menu "----  Alternate Pin Mapping"

choice
	prompt "----  Alternate Pin Mapping"

config STM32_CAN_NO_REMAP
	bool "No pin remapping"

config STM32_CAN_REMAP1
	bool "CAN alternate pin remapping #1"

config STM32_CAN_REMAP2
	bool "CAN alternate pin remapping #2"

endchoice

config STM32_ETH_REMAP
	bool "Ethernet Alternate Pin Mapping"
	default n
	depends on STM32_CONNECTIVITYLINE && STM32_ETHMAC

config STM32_I2C1_REMAP
	bool "I2C1 Alternate Pin Mapping"
	default n
	depends on STM32_STM32F10XX && STM32_I2C1

config STM32_SPI1_REMAP
	bool "SPI1 Alternate Pin Mapping"
	default n
	depends on STM32_STM32F10XX && STM32_SPI1

config STM32_SPI3_REMAP
	bool "SPI3 Alternate Pin Mapping"
	default n
	depends on STM32_STM32F10XX && STM32_SPI3 && !STM32_VALUELINE

choice
	prompt "TIM1 Alternate Pin Mappings"
	depends on STM32_TIM1
	default STM32_TIM1_NO_REMAP

config STM32_TIM1_NO_REMAP
	bool "No pin remapping"

config STM32_TIM1_FULL_REMAP
	bool "Full pin remapping"

config STM32_TIM1_PARTIAL_REMAP
	bool "Partial pin remapping"

endchoice

choice
	prompt "TIM2 Alternate Pin Mappings"
	depends on STM32_STM32F10XX && STM32_TIM2
	default STM32_TIM2_NO_REMAP

config STM32_TIM2_NO_REMAP
	bool "No pin remapping"

config STM32_TIM2_FULL_REMAP
	bool "Full pin remapping"

config STM32_TIM2_PARTIAL_REMAP_1
	bool "Partial pin remapping #1"

config STM32_TIM2_PARTIAL_REMAP_2
	bool "Partial pin remapping #2"

endchoice

choice
	prompt "TIM3 Alternate Pin Mappings"
	depends on STM32_STM32F10XX && STM32_TIM3
	default STM32_TIM3_NO_REMAP

config STM32_TIM3_NO_REMAP
	bool "No pin remapping"

config STM32_TIM3_FULL_REMAP
	bool "Full pin remapping"

config STM32_TIM3_PARTIAL_REMAP
	bool "Partial pin remapping"

endchoice

config STM32_TIM4_REMAP
	bool "TIM4 Alternate Pin Mapping"
	default n
	depends on STM32_STM32F10XX && STM32_TIM4

config STM32_TIM9_REMAP
	bool "TIM9 Alternate Pin Mapping"
	default n
	depends on STM32_STM32F10XX && STM32_TIM9

config STM32_TIM10_REMAP
	bool "TIM10 Alternate Pin Mapping"
	default n
	depends on STM32_STM32F10XX && STM32_TIM10

config STM32_TIM11_REMAP
	bool "TIM11 Alternate Pin Mapping"
	default n
	depends on STM32_STM32F10XX && STM32_TIM11

config STM32_TIM12_REMAP
	bool "TIM12 Alternate Pin Mapping"
	default n
	depends on STM32_STM32F10XX && STM32_TIM12

config STM32_TIM13_REMAP
	bool "TIM13 Alternate Pin Mapping"
	default n
	depends on STM32_STM32F10XX && STM32_TIM13

config STM32_TIM14_REMAP
	bool "TIM14 Alternate Pin Mapping"
	default n
	depends on STM32_STM32F10XX && STM32_TIM14

config STM32_TIM15_REMAP
	bool "TIM15 Alternate Pin Mapping"
	default n
	depends on STM32_STM32F10XX && STM32_TIM15

config STM32_TIM16_REMAP
	bool "TIM16 Alternate Pin Mapping"
	default n
	depends on STM32_STM32F10XX && STM32_TIM16

config STM32_TIM17_REMAP
	bool "TIM17 Alternate Pin Mapping"
	default n
	depends on STM32_STM32F10XX && STM32_TIM17

config STM32_USART1_REMAP
	bool "USART1 Alternate Pin Mapping"
	default n
	depends on STM32_USART1

config STM32_USART2_REMAP
	bool "USART2 Alternate Pin Mapping"
	default n
	depends on STM32_USART2

choice
	prompt "USART3 Alternate Pin Mappings"
	depends on STM32_USART3
	default STM32_USART3_NO_REMAP

config STM32_USART3_NO_REMAP
	bool "No pin remapping"

config STM32_USART3_FULL_REMAP
	bool "Full pin remapping"

config STM32_USART3_PARTIAL_REMAP
	bool "Partial pin remapping"

endchoice

endmenu

config STM32_FLASH_PREFETCH
	bool "Enable FLASH Pre-fetch"
	depends on STM32_STM32L4X6 || STM32_STM32L4X3 || STM32_STM32L4X1
	default n

choice
	prompt "JTAG Configuration"
	default STM32_JTAG_DISABLE
	---help---
		JTAG Enable settings (by default JTAG-DP and SW-DP are disabled)

config STM32_JTAG_DISABLE
	bool "Disable all JTAG clocking"

config STM32_JTAG_FULL_ENABLE
	bool "Enable full SWJ (JTAG-DP + SW-DP)"

config STM32_JTAG_NOJNTRST_ENABLE
	bool "Enable full SWJ (JTAG-DP + SW-DP) but without JNTRST"

config STM32_JTAG_SW_ENABLE
	bool "Set JTAG-DP disabled and SW-DP enabled"

endchoice

config STM32_DISABLE_IDLE_SLEEP_DURING_DEBUG
	bool "Disable IDLE Sleep (WFI) in debug mode"
	default n
	---help---
		In debug configuration, disables the WFI instruction in the IDLE loop
		to prevent the JTAG from disconnecting.  With some JTAG debuggers, such
		as the ST-LINK2 with OpenOCD, if the ARM is put to sleep via the WFI
		instruction, the debugger will disconnect, terminating the debug session.

config STM32_FORCEPOWER
	bool "Force power"
	default n
	---help---
		Timer and I2C devices may need to the following to force power to be applied
		unconditionally at power up.  (Otherwise, the device is powered when it is
		initialized).

config ARCH_BOARD_STM32_CUSTOM_CLOCKCONFIG
	bool "Custom clock configuration"
	default n
	---help---
		Enables special, board-specific STM32 clock configuration.

config STM32_FSMC_SRAM
	bool "External SRAM on FSMC"
	default n
	depends on STM32_FSMC
	select ARCH_HAVE_HEAP2
	---help---
		In addition to internal SRAM, SRAM may also be available through the FSMC.

config STM32_TIM1_PWM
	bool "TIM1 PWM"
	default n
	depends on STM32_TIM1
	select ARCH_HAVE_PWM_PULSECOUNT
	---help---
		Reserve timer 1 for use by PWM

		Timer devices may be used for different purposes.  One special purpose is
		to generate modulated outputs for such things as motor control.  If STM32_TIM1
		is defined then THIS following may also be defined to indicate that
		the timer is intended to be used for pulsed output modulation.

config STM32_TIM1_CHANNEL
	int "TIM1 PWM Output Channel"
	default 1
	range 1 4
	depends on STM32_TIM1_PWM
	---help---
		If TIM1 is enabled for PWM usage, you also need specifies the timer output
		channel {1,..,4}

config STM32_TIM2_PWM
	bool "TIM2 PWM"
	default n
	depends on STM32_TIM2
	select ARCH_HAVE_PWM_PULSECOUNT
	---help---
		Reserve timer 2 for use by PWM

		Timer devices may be used for different purposes.  One special purpose is
		to generate modulated outputs for such things as motor control.  If STM32_TIM2
		is defined then THIS following may also be defined to indicate that
		the timer is intended to be used for pulsed output modulation.

config STM32_TIM2_CHANNEL
	int "TIM2 PWM Output Channel"
	default 1
	range 1 4
	depends on STM32_TIM2_PWM
	---help---
		If TIM2 is enabled for PWM usage, you also need specifies the timer output
		channel {1,..,4}

config STM32_TIM3_PWM
	bool "TIM3 PWM"
	default n
	depends on STM32_TIM3
	select ARCH_HAVE_PWM_PULSECOUNT
	---help---
		Reserve timer 3 for use by PWM

		Timer devices may be used for different purposes.  One special purpose is
		to generate modulated outputs for such things as motor control.  If STM32_TIM3
		is defined then THIS following may also be defined to indicate that
		the timer is intended to be used for pulsed output modulation.

config STM32_TIM3_CHANNEL
	int "TIM3 PWM Output Channel"
	default 1
	range 1 4
	depends on STM32_TIM3_PWM
	---help---
		If TIM3 is enabled for PWM usage, you also need specifies the timer output
		channel {1,..,4}

config STM32_TIM4_PWM
	bool "TIM4 PWM"
	default n
	depends on STM32_TIM4
	select ARCH_HAVE_PWM_PULSECOUNT
	---help---
		Reserve timer 4 for use by PWM

		Timer devices may be used for different purposes.  One special purpose is
		to generate modulated outputs for such things as motor control.  If STM32_TIM4
		is defined then THIS following may also be defined to indicate that
		the timer is intended to be used for pulsed output modulation.

config STM32_TIM4_CHANNEL
	int "TIM4 PWM Output Channel"
	default 1
	range 1 4
	depends on STM32_TIM4_PWM
	---help---
		If TIM4 is enabled for PWM usage, you also need specifies the timer output
		channel {1,..,4}

config STM32_TIM5_PWM
	bool "TIM5 PWM"
	default n
	depends on STM32_TIM5
	select ARCH_HAVE_PWM_PULSECOUNT
	---help---
		Reserve timer 5 for use by PWM

		Timer devices may be used for different purposes.  One special purpose is
		to generate modulated outputs for such things as motor control.  If STM32_TIM5
		is defined then THIS following may also be defined to indicate that
		the timer is intended to be used for pulsed output modulation.

config STM32_TIM5_CHANNEL
	int "TIM5 PWM Output Channel"
	default 1
	range 1 4
	depends on STM32_TIM5_PWM
	---help---
		If TIM5 is enabled for PWM usage, you also need specifies the timer output
		channel {1,..,4}

config STM32_TIM8_PWM
	bool "TIM8 PWM"
	default n
	depends on STM32_TIM8
	select ARCH_HAVE_PWM_PULSECOUNT
	---help---
		Reserve timer 8 for use by PWM

		Timer devices may be used for different purposes.  One special purpose is
		to generate modulated outputs for such things as motor control.  If STM32_TIM8
		is defined then THIS following may also be defined to indicate that
		the timer is intended to be used for pulsed output modulation.

config STM32_TIM8_CHANNEL
	int "TIM8 PWM Output Channel"
	default 1
	range 1 4
	depends on STM32_TIM8_PWM
	---help---
		If TIM8 is enabled for PWM usage, you also need specifies the timer output
		channel {1,..,4}

config STM32_TIM9_PWM
	bool "TIM9 PWM"
	default n
	depends on STM32_TIM9
	select ARCH_HAVE_PWM_PULSECOUNT
	---help---
		Reserve timer 9 for use by PWM

		Timer devices may be used for different purposes.  One special purpose is
		to generate modulated outputs for such things as motor control.  If STM32_TIM9
		is defined then THIS following may also be defined to indicate that
		the timer is intended to be used for pulsed output modulation.

config STM32_TIM9_CHANNEL
	int "TIM9 PWM Output Channel"
	default 1
	range 1 4
	depends on STM32_TIM9_PWM
	---help---
		If TIM9 is enabled for PWM usage, you also need specifies the timer output
		channel {1,..,4}

config STM32_TIM10_PWM
	bool "TIM10 PWM"
	default n
	depends on STM32_TIM10
	select ARCH_HAVE_PWM_PULSECOUNT
	---help---
		Reserve timer 10 for use by PWM

		Timer devices may be used for different purposes.  One special purpose is
		to generate modulated outputs for such things as motor control.  If STM32_TIM10
		is defined then THIS following may also be defined to indicate that
		the timer is intended to be used for pulsed output modulation.

config STM32_TIM10_CHANNEL
	int "TIM10 PWM Output Channel"
	default 1
	range 1 4
	depends on STM32_TIM10_PWM
	---help---
		If TIM10 is enabled for PWM usage, you also need specifies the timer output
		channel {1,..,4}

config STM32_TIM11_PWM
	bool "TIM11 PWM"
	default n
	depends on STM32_TIM11
	select ARCH_HAVE_PWM_PULSECOUNT
	---help---
		Reserve timer 11 for use by PWM

		Timer devices may be used for different purposes.  One special purpose is
		to generate modulated outputs for such things as motor control.  If STM32_TIM11
		is defined then THIS following may also be defined to indicate that
		the timer is intended to be used for pulsed output modulation.

config STM32_TIM11_CHANNEL
	int "TIM11 PWM Output Channel"
	default 1
	range 1 4
	depends on STM32_TIM11_PWM
	---help---
		If TIM11 is enabled for PWM usage, you also need specifies the timer output
		channel {1,..,4}

config STM32_TIM12_PWM
	bool "TIM12 PWM"
	default n
	depends on STM32_TIM12
	select ARCH_HAVE_PWM_PULSECOUNT
	---help---
		Reserve timer 12 for use by PWM

		Timer devices may be used for different purposes.  One special purpose is
		to generate modulated outputs for such things as motor control.  If STM32_TIM12
		is defined then THIS following may also be defined to indicate that
		the timer is intended to be used for pulsed output modulation.

config STM32_TIM12_CHANNEL
	int "TIM12 PWM Output Channel"
	default 1
	range 1 4
	depends on STM32_TIM12_PWM
	---help---
		If TIM12 is enabled for PWM usage, you also need specifies the timer output
		channel {1,..,4}

config STM32_TIM13_PWM
	bool "TIM13 PWM"
	default n
	depends on STM32_TIM13
	select ARCH_HAVE_PWM_PULSECOUNT
	---help---
		Reserve timer 13 for use by PWM

		Timer devices may be used for different purposes.  One special purpose is
		to generate modulated outputs for such things as motor control.  If STM32_TIM13
		is defined then THIS following may also be defined to indicate that
		the timer is intended to be used for pulsed output modulation.

config STM32_TIM13_CHANNEL
	int "TIM13 PWM Output Channel"
	default 1
	range 1 4
	depends on STM32_TIM13_PWM
	---help---
		If TIM13 is enabled for PWM usage, you also need specifies the timer output
		channel {1,..,4}

config STM32_TIM14_PWM
	bool "TIM14 PWM"
	default n
	depends on STM32_TIM14
	select ARCH_HAVE_PWM_PULSECOUNT
	---help---
		Reserve timer 14 for use by PWM

		Timer devices may be used for different purposes.  One special purpose is
		to generate modulated outputs for such things as motor control.  If STM32_TIM14
		is defined then THIS following may also be defined to indicate that
		the timer is intended to be used for pulsed output modulation.

config STM32_TIM14_CHANNEL
	int "TIM14 PWM Output Channel"
	default 1
	range 1 4
	depends on STM32_TIM14_PWM
	---help---
		If TIM14 is enabled for PWM usage, you also need specifies the timer output
		channel {1,..,4}

config STM32_TIM15_PWM
	bool "TIM15 PWM"
	default n
	depends on STM32_TIM15
	---help---
		Reserve timer 15 for use by PWM

		Timer devices may be used for different purposes.  One special purpose is
		to generate modulated outputs for such things as motor control.  If STM32_TIM15
		is defined then THIS following may also be defined to indicate that
		the timer is intended to be used for pulsed output modulation.

config STM32_TIM15_CHANNEL
	int "TIM15 PWM Output Channel"
	default 1
	range 1 2
	depends on STM32_TIM15_PWM
	---help---
		If TIM15 is enabled for PWM usage, you also need specifies the timer output
		channel {1,2}

config STM32_TIM16_PWM
	bool "TIM16 PWM"
	default n
	depends on STM32_TIM16
	---help---
		Reserve timer 16 for use by PWM

		Timer devices may be used for different purposes.  One special purpose is
		to generate modulated outputs for such things as motor control.  If STM32_TIM16
		is defined then THIS following may also be defined to indicate that
		the timer is intended to be used for pulsed output modulation.

config STM32_TIM16_CHANNEL
	int "TIM16 PWM Output Channel"
	default 1
	range 1 1
	depends on STM32_TIM16_PWM
	---help---
		If TIM16 is enabled for PWM usage, you also need specifies the timer output
		channel {1}

config STM32_TIM17_PWM
	bool "TIM17 PWM"
	default n
	depends on STM32_TIM17
	---help---
		Reserve timer 17 for use by PWM

		Timer devices may be used for different purposes.  One special purpose is
		to generate modulated outputs for such things as motor control.  If STM32_TIM17
		is defined then THIS following may also be defined to indicate that
		the timer is intended to be used for pulsed output modulation.

config STM32_TIM17_CHANNEL
	int "TIM17 PWM Output Channel"
	default 1
	range 1 1
	depends on STM32_TIM17_PWM
	---help---
		If TIM17 is enabled for PWM usage, you also need specifies the timer output
		channel {1}

config STM32_TIM1_ADC
	bool "TIM1 ADC"
	default n
	depends on STM32_TIM1 && STM32_ADC
	---help---
		Reserve timer 1 for use by ADC

		Timer devices may be used for different purposes.  If STM32_TIM1 is
		defined then the following may also be defined to indicate that the
		timer is intended to be used for ADC conversion. Note that ADC usage
		requires two definition:  Not only do you have to assign the timer
		for used by the ADC, but then you also have to configure which ADC
		channel it is assigned to.

choice
	prompt "Select TIM1 ADC channel"
	default STM32_TIM1_ADC1
	depends on STM32_TIM1_ADC

config STM32_TIM1_ADC1
	bool "TIM1 ADC channel 1"
	depends on STM32_HAVE_ADC1
	select HAVE_ADC1_TIMER
	---help---
		Reserve TIM1 to trigger ADC1

config STM32_TIM1_ADC2
	bool "TIM1 ADC channel 2"
	depends on STM32_HAVE_ADC2
	select HAVE_ADC2_TIMER
	---help---
		Reserve TIM1 to trigger ADC2

config STM32_TIM1_ADC3
	bool "TIM1 ADC channel 3"
	depends on STM32_HAVE_ADC3
	select HAVE_ADC3_TIMER
	---help---
		Reserve TIM1 to trigger ADC3

endchoice

config STM32_TIM2_ADC
	bool "TIM2 ADC"
	default n
	depends on STM32_TIM2 && STM32_ADC
	---help---
		Reserve timer 1 for use by ADC

		Timer devices may be used for different purposes.  If STM32_TIM2 is
		defined then the following may also be defined to indicate that the
		timer is intended to be used for ADC conversion. Note that ADC usage
		requires two definition:  Not only do you have to assign the timer
		for used by the ADC, but then you also have to configure which ADC
		channel it is assigned to.

choice
	prompt "Select TIM2 ADC channel"
	default STM32_TIM2_ADC1
	depends on STM32_TIM2_ADC

config STM32_TIM2_ADC1
	bool "TIM2 ADC channel 1"
	depends on STM32_HAVE_ADC1
	select HAVE_ADC1_TIMER
	---help---
		Reserve TIM2 to trigger ADC1

config STM32_TIM2_ADC2
	bool "TIM2 ADC channel 2"
	depends on STM32_HAVE_ADC2
	select HAVE_ADC2_TIMER
	---help---
		Reserve TIM2 to trigger ADC2

config STM32_TIM2_ADC3
	bool "TIM2 ADC channel 3"
	depends on STM32_HAVE_ADC3
	select HAVE_ADC3_TIMER
	---help---
		Reserve TIM2 to trigger ADC3

endchoice

config STM32_TIM3_ADC
	bool "TIM3 ADC"
	default n
	depends on STM32_TIM3 && STM32_ADC
	---help---
		Reserve timer 1 for use by ADC

		Timer devices may be used for different purposes.  If STM32_TIM3 is
		defined then the following may also be defined to indicate that the
		timer is intended to be used for ADC conversion. Note that ADC usage
		requires two definition:  Not only do you have to assign the timer
		for used by the ADC, but then you also have to configure which ADC
		channel it is assigned to.

choice
	prompt "Select TIM3 ADC channel"
	default STM32_TIM3_ADC1
	depends on STM32_TIM3_ADC

config STM32_TIM3_ADC1
	bool "TIM3 ADC channel 1"
	depends on STM32_HAVE_ADC1
	select HAVE_ADC1_TIMER
	---help---
		Reserve TIM3 to trigger ADC1

config STM32_TIM3_ADC2
	bool "TIM3 ADC channel 2"
	depends on STM32_HAVE_ADC2
	select HAVE_ADC2_TIMER
	---help---
		Reserve TIM3 to trigger ADC2

config STM32_TIM3_ADC3
	bool "TIM3 ADC channel 3"
	depends on STM32_HAVE_ADC3
	select HAVE_ADC3_TIMER
	---help---
		Reserve TIM3 to trigger ADC3

endchoice

config STM32_TIM4_ADC
	bool "TIM4 ADC"
	default n
	depends on STM32_TIM4 && STM32_ADC
	---help---
		Reserve timer 1 for use by ADC

		Timer devices may be used for different purposes.  If STM32_TIM4 is
		defined then the following may also be defined to indicate that the
		timer is intended to be used for ADC conversion. Note that ADC usage
		requires two definition:  Not only do you have to assign the timer
		for used by the ADC, but then you also have to configure which ADC
		channel it is assigned to.

choice
	prompt "Select TIM4 ADC channel"
	default STM32_TIM4_ADC1
	depends on STM32_TIM4_ADC

config STM32_TIM4_ADC1
	bool "TIM4 ADC channel 1"
	depends on STM32_HAVE_ADC1
	select HAVE_ADC1_TIMER
	---help---
		Reserve TIM4 to trigger ADC1

config STM32_TIM4_ADC2
	bool "TIM4 ADC channel 2"
	depends on STM32_HAVE_ADC2
	select HAVE_ADC2_TIMER
	---help---
		Reserve TIM4 to trigger ADC2

config STM32_TIM4_ADC3
	bool "TIM4 ADC channel 3"
	depends on STM32_HAVE_ADC3
	select HAVE_ADC3_TIMER
	---help---
		Reserve TIM4 to trigger ADC3

endchoice

config STM32_TIM5_ADC
	bool "TIM5 ADC"
	default n
	depends on STM32_TIM5 && STM32_ADC
	---help---
		Reserve timer 1 for use by ADC

		Timer devices may be used for different purposes.  If STM32_TIM5 is
		defined then the following may also be defined to indicate that the
		timer is intended to be used for ADC conversion. Note that ADC usage
		requires two definition:  Not only do you have to assign the timer
		for used by the ADC, but then you also have to configure which ADC
		channel it is assigned to.

choice
	prompt "Select TIM5 ADC channel"
	default STM32_TIM5_ADC1
	depends on STM32_TIM5_ADC

config STM32_TIM5_ADC1
	bool "TIM5 ADC channel 1"
	depends on STM32_HAVE_ADC1
	select HAVE_ADC1_TIMER
	---help---
		Reserve TIM5 to trigger ADC1

config STM32_TIM5_ADC2
	bool "TIM5 ADC channel 2"
	depends on STM32_HAVE_ADC2
	select HAVE_ADC2_TIMER
	---help---
		Reserve TIM5 to trigger ADC2

config STM32_TIM5_ADC3
	bool "TIM5 ADC channel 3"
	depends on STM32_HAVE_ADC3
	select HAVE_ADC3_TIMER
	---help---
		Reserve TIM5 to trigger ADC3

endchoice

config STM32_TIM8_ADC
	bool "TIM8 ADC"
	default n
	depends on STM32_TIM8 && STM32_ADC
	---help---
		Reserve timer 1 for use by ADC

		Timer devices may be used for different purposes.  If STM32_TIM8 is
		defined then the following may also be defined to indicate that the
		timer is intended to be used for ADC conversion. Note that ADC usage
		requires two definition:  Not only do you have to assign the timer
		for used by the ADC, but then you also have to configure which ADC
		channel it is assigned to.

choice
	prompt "Select TIM8 ADC channel"
	default STM32_TIM8_ADC1
	depends on STM32_TIM8_ADC

config STM32_TIM8_ADC1
	bool "TIM8 ADC channel 1"
	depends on STM32_HAVE_ADC1
	select HAVE_ADC1_TIMER
	---help---
		Reserve TIM8 to trigger ADC1

config STM32_TIM8_ADC2
	bool "TIM8 ADC channel 2"
	depends on STM32_HAVE_ADC2
	select HAVE_ADC2_TIMER
	---help---
		Reserve TIM8 to trigger ADC2

config STM32_TIM8_ADC3
	bool "TIM8 ADC channel 3"
	depends on STM32_HAVE_ADC3
	select HAVE_ADC3_TIMER
	---help---
		Reserve TIM8 to trigger ADC3

endchoice

config HAVE_ADC1_TIMER
	bool

config HAVE_ADC2_TIMER
	bool

config HAVE_ADC3_TIMER
	bool

config STM32_ADC1_SAMPLE_FREQUENCY
	int "ADC1 Sampling Frequency"
	default 100
	depends on HAVE_ADC1_TIMER
	---help---
		ADC1 sampling frequency.  Default:  100Hz

config STM32_ADC1_TIMTRIG
	int "ADC1 Timer Trigger"
	default 0
	range 0 4
	depends on HAVE_ADC1_TIMER
	---help---
		Values 0:CC1 1:CC2 2:CC3 3:CC4 4:TRGO

config STM32_ADC2_SAMPLE_FREQUENCY
	int "ADC2 Sampling Frequency"
	default 100
	depends on HAVE_ADC2_TIMER
	---help---
		ADC2 sampling frequency.  Default:  100Hz

config STM32_ADC2_TIMTRIG
	int "ADC2 Timer Trigger"
	default 0
	range 0 4
	depends on HAVE_ADC2_TIMER
	---help---
		Values 0:CC1 1:CC2 2:CC3 3:CC4 4:TRGO

config STM32_ADC3_SAMPLE_FREQUENCY
	int "ADC3 Sampling Frequency"
	default 100
	depends on HAVE_ADC3_TIMER
	---help---
		ADC3 sampling frequency.  Default:  100Hz

config STM32_ADC3_TIMTRIG
	int "ADC3 Timer Trigger"
	default 0
	range 0 4
	depends on HAVE_ADC3_TIMER
	---help---
		Values 0:CC1 1:CC2 2:CC3 3:CC4 4:TRGO

config STM32_TIM1_DAC
	bool "TIM1 DAC"
	default n
	depends on STM32_TIM1 && (STM32_DAC1 || STM32_DAC2)
	---help---
		Reserve timer 1 for use by DAC

		Timer devices may be used for different purposes.  If STM32_TIM1 is
		defined then the following may also be defined to indicate that the
		timer is intended to be used for DAC conversion. Note that DAC usage
		requires two definition:  Not only do you have to assign the timer
		for used by the DAC, but then you also have to configure which DAC
		channel it is assigned to.

choice
	prompt "Select TIM1 DAC channel"
	default STM32_TIM1_DAC1
	depends on STM32_TIM1_DAC

config STM32_TIM1_DAC1
	bool "TIM1 DAC channel 1"
	---help---
		Reserve TIM1 to trigger DAC1

config STM32_TIM1_DAC2
	bool "TIM1 DAC channel 2"
	---help---
		Reserve TIM1 to trigger DAC2

endchoice

config STM32_TIM2_DAC
	bool "TIM2 DAC"
	default n
	depends on STM32_TIM2 && (STM32_DAC1 || STM32_DAC2)
	---help---
		Reserve timer 2 for use by DAC

		Timer devices may be used for different purposes.  If STM32_TIM2 is
		defined then the following may also be defined to indicate that the
		timer is intended to be used for DAC conversion. Note that DAC usage
		requires two definition:  Not only do you have to assign the timer
		for used by the DAC, but then you also have to configure which DAC
		channel it is assigned to.

choice
	prompt "Select TIM2 DAC channel"
	default STM32_TIM2_DAC1
	depends on STM32_TIM2_DAC

config STM32_TIM2_DAC1
	bool "TIM2 DAC channel 1"
	---help---
		Reserve TIM2 to trigger DAC1

config STM32_TIM2_DAC2
	bool "TIM2 DAC channel 2"
	---help---
		Reserve TIM2 to trigger DAC2

endchoice

config STM32_TIM3_DAC
	bool "TIM3 DAC"
	default n
	depends on STM32_TIM3 && (STM32_DAC1 || STM32_DAC2)
	---help---
		Reserve timer 3 for use by DAC

		Timer devices may be used for different purposes.  If STM32_TIM3 is
		defined then the following may also be defined to indicate that the
		timer is intended to be used for DAC conversion. Note that DAC usage
		requires two definition:  Not only do you have to assign the timer
		for used by the DAC, but then you also have to configure which DAC
		channel it is assigned to.

choice
	prompt "Select TIM3 DAC channel"
	default STM32_TIM3_DAC1
	depends on STM32_TIM3_DAC

config STM32_TIM3_DAC1
	bool "TIM3 DAC channel 1"
	---help---
		Reserve TIM3 to trigger DAC1

config STM32_TIM3_DAC2
	bool "TIM3 DAC channel 2"
	---help---
		Reserve TIM3 to trigger DAC2

endchoice

config STM32_TIM4_DAC
	bool "TIM4 DAC"
	default n
	depends on STM32_TIM4 && (STM32_DAC1 || STM32_DAC2)
	---help---
		Reserve timer 4 for use by DAC

		Timer devices may be used for different purposes.  If STM32_TIM4 is
		defined then the following may also be defined to indicate that the
		timer is intended to be used for DAC conversion. Note that DAC usage
		requires two definition:  Not only do you have to assign the timer
		for used by the DAC, but then you also have to configure which DAC
		channel it is assigned to.

choice
	prompt "Select TIM4 DAC channel"
	default STM32_TIM4_DAC1
	depends on STM32_TIM4_DAC

config STM32_TIM4_DAC1
	bool "TIM4 DAC channel 1"
	---help---
		Reserve TIM4 to trigger DAC1

config STM32_TIM4_DAC2
	bool "TIM4 DAC channel 2"
	---help---
		Reserve TIM4 to trigger DAC2

endchoice

config STM32_TIM5_DAC
	bool "TIM5 DAC"
	default n
	depends on STM32_TIM5 && (STM32_DAC1 || STM32_DAC2)
	---help---
		Reserve timer 5 for use by DAC

		Timer devices may be used for different purposes.  If STM32_TIM5 is
		defined then the following may also be defined to indicate that the
		timer is intended to be used for DAC conversion. Note that DAC usage
		requires two definition:  Not only do you have to assign the timer
		for used by the DAC, but then you also have to configure which DAC
		channel it is assigned to.

choice
	prompt "Select TIM5 DAC channel"
	default STM32_TIM5_DAC1
	depends on STM32_TIM5_DAC

config STM32_TIM5_DAC1
	bool "TIM5 DAC channel 1"
	---help---
		Reserve TIM5 to trigger DAC1

config STM32_TIM5_DAC2
	bool "TIM5 DAC channel 2"
	---help---
		Reserve TIM5 to trigger DAC2

endchoice

config STM32_TIM6_DAC
	bool "TIM6 DAC"
	default n
	depends on STM32_TIM6 && (STM32_DAC1 || STM32_DAC2)
	---help---
		Reserve timer 6 for use by DAC

		Timer devices may be used for different purposes.  If STM32_TIM6 is
		defined then the following may also be defined to indicate that the
		timer is intended to be used for DAC conversion. Note that DAC usage
		requires two definition:  Not only do you have to assign the timer
		for used by the DAC, but then you also have to configure which DAC
		channel it is assigned to.

choice
	prompt "Select TIM6 DAC channel"
	default STM32_TIM6_DAC1
	depends on STM32_TIM6_DAC

config STM32_TIM6_DAC1
	bool "TIM6 DAC channel 1"
	---help---
		Reserve TIM6 to trigger DAC1

config STM32_TIM6_DAC2
	bool "TIM6 DAC channel 2"
	---help---
		Reserve TIM6 to trigger DAC2

endchoice

config STM32_TIM7_DAC
	bool "TIM7 DAC"
	default n
	depends on STM32_TIM7 && (STM32_DAC1 || STM32_DAC2)
	---help---
		Reserve timer 7 for use by DAC

		Timer devices may be used for different purposes.  If STM32_TIM7 is
		defined then the following may also be defined to indicate that the
		timer is intended to be used for DAC conversion. Note that DAC usage
		requires two definition:  Not only do you have to assign the timer
		for used by the DAC, but then you also have to configure which DAC
		channel it is assigned to.

choice
	prompt "Select TIM7 DAC channel"
	default STM32_TIM7_DAC1
	depends on STM32_TIM7_DAC

config STM32_TIM7_DAC1
	bool "TIM7 DAC channel 1"
	---help---
		Reserve TIM7 to trigger DAC1

config STM32_TIM7_DAC2
	bool "TIM7 DAC channel 2"
	---help---
		Reserve TIM7 to trigger DAC2

endchoice

config STM32_TIM8_DAC
	bool "TIM8 DAC"
	default n
	depends on STM32_TIM8 && (STM32_DAC1 || STM32_DAC2)
	---help---
		Reserve timer 8 for use by DAC

		Timer devices may be used for different purposes.  If STM32_TIM8 is
		defined then the following may also be defined to indicate that the
		timer is intended to be used for DAC conversion. Note that DAC usage
		requires two definition:  Not only do you have to assign the timer
		for used by the DAC, but then you also have to configure which DAC
		channel it is assigned to.

choice
	prompt "Select TIM8 DAC channel"
	default STM32_TIM8_DAC1
	depends on STM32_TIM8_DAC

config STM32_TIM8_DAC1
	bool "TIM8 DAC channel 1"
	---help---
		Reserve TIM8 to trigger DAC1

config STM32_TIM8_DAC2
	bool "TIM8 DAC channel 2"
	---help---
		Reserve TIM8 to trigger DAC2

endchoice

config STM32_TIM9_DAC
	bool "TIM9 DAC"
	default n
	depends on STM32_TIM9 && (STM32_DAC1 || STM32_DAC2)
	---help---
		Reserve timer 9 for use by DAC

		Timer devices may be used for different purposes.  If STM32_TIM9 is
		defined then the following may also be defined to indicate that the
		timer is intended to be used for DAC conversion. Note that DAC usage
		requires two definition:  Not only do you have to assign the timer
		for used by the DAC, but then you also have to configure which DAC
		channel it is assigned to.

choice
	prompt "Select TIM9 DAC channel"
	default STM32_TIM9_DAC1
	depends on STM32_TIM9_DAC

config STM32_TIM9_DAC1
	bool "TIM9 DAC channel 1"
	---help---
		Reserve TIM9 to trigger DAC1

config STM32_TIM9_DAC2
	bool "TIM9 DAC channel 2"
	---help---
		Reserve TIM9 to trigger DAC2

endchoice

config STM32_TIM10_DAC
	bool "TIM10 DAC"
	default n
	depends on STM32_TIM10 && (STM32_DAC1 || STM32_DAC2)
	---help---
		Reserve timer 10 for use by DAC

		Timer devices may be used for different purposes.  If STM32_TIM10 is
		defined then the following may also be defined to indicate that the
		timer is intended to be used for DAC conversion. Note that DAC usage
		requires two definition:  Not only do you have to assign the timer
		for used by the DAC, but then you also have to configure which DAC
		channel it is assigned to.

choice
	prompt "Select TIM10 DAC channel"
	default STM32_TIM10_DAC1
	depends on STM32_TIM10_DAC

config STM32_TIM10_DAC1
	bool "TIM10 DAC channel 1"
	---help---
		Reserve TIM10 to trigger DAC1

config STM32_TIM10_DAC2
	bool "TIM10 DAC channel 2"
	---help---
		Reserve TIM10 to trigger DAC2

endchoice

config STM32_TIM11_DAC
	bool "TIM11 DAC"
	default n
	depends on STM32_TIM11 && (STM32_DAC1 || STM32_DAC2)
	---help---
		Reserve timer 11 for use by DAC

		Timer devices may be used for different purposes.  If STM32_TIM11 is
		defined then the following may also be defined to indicate that the
		timer is intended to be used for DAC conversion. Note that DAC usage
		requires two definition:  Not only do you have to assign the timer
		for used by the DAC, but then you also have to configure which DAC
		channel it is assigned to.

choice
	prompt "Select TIM11 DAC channel"
	default STM32_TIM11_DAC1
	depends on STM32_TIM11_DAC

config STM32_TIM11_DAC1
	bool "TIM11 DAC channel 1"
	---help---
		Reserve TIM11 to trigger DAC1

config STM32_TIM11_DAC2
	bool "TIM11 DAC channel 2"
	---help---
		Reserve TIM11 to trigger DAC2

endchoice

config STM32_TIM12_DAC
	bool "TIM12 DAC"
	default n
	depends on STM32_TIM12 && (STM32_DAC1 || STM32_DAC2)
	---help---
		Reserve timer 12 for use by DAC

		Timer devices may be used for different purposes.  If STM32_TIM12 is
		defined then the following may also be defined to indicate that the
		timer is intended to be used for DAC conversion. Note that DAC usage
		requires two definition:  Not only do you have to assign the timer
		for used by the DAC, but then you also have to configure which DAC
		channel it is assigned to.

choice
	prompt "Select TIM12 DAC channel"
	default STM32_TIM12_DAC1
	depends on STM32_TIM12_DAC

config STM32_TIM12_DAC1
	bool "TIM12 DAC channel 1"
	---help---
		Reserve TIM12 to trigger DAC1

config STM32_TIM12_DAC2
	bool "TIM12 DAC channel 2"
	---help---
		Reserve TIM12 to trigger DAC2

endchoice

config STM32_TIM13_DAC
	bool "TIM13 DAC"
	default n
	depends on STM32_TIM13 && (STM32_DAC1 || STM32_DAC2)
	---help---
		Reserve timer 13 for use by DAC

		Timer devices may be used for different purposes.  If STM32_TIM13 is
		defined then the following may also be defined to indicate that the
		timer is intended to be used for DAC conversion. Note that DAC usage
		requires two definition:  Not only do you have to assign the timer
		for used by the DAC, but then you also have to configure which DAC
		channel it is assigned to.

choice
	prompt "Select TIM13 DAC channel"
	default STM32_TIM13_DAC1
	depends on STM32_TIM13_DAC

config STM32_TIM13_DAC1
	bool "TIM13 DAC channel 1"
	---help---
		Reserve TIM13 to trigger DAC1

config STM32_TIM13_DAC2
	bool "TIM13 DAC channel 2"
	---help---
		Reserve TIM13 to trigger DAC2

endchoice

config STM32_TIM14_DAC
	bool "TIM14 DAC"
	default n
	depends on STM32_TIM14 && (STM32_DAC1 || STM32_DAC2)
	---help---
		Reserve timer 14 for use by DAC

		Timer devices may be used for different purposes.  If STM32_TIM14 is
		defined then the following may also be defined to indicate that the
		timer is intended to be used for DAC conversion. Note that DAC usage
		requires two definition:  Not only do you have to assign the timer
		for used by the DAC, but then you also have to configure which DAC
		channel it is assigned to.

choice
	prompt "Select TIM14 DAC channel"
	default STM32_TIM14_DAC1
	depends on STM32_TIM14_DAC

config STM32_TIM14_DAC1
	bool "TIM14 DAC channel 1"
	---help---
		Reserve TIM14 to trigger DAC1

config STM32_TIM14_DAC2
	bool "TIM14 DAC channel 2"
	---help---
		Reserve TIM14 to trigger DAC2

endchoice

menu "DAC Configuration"
	depends on STM32_DAC1 || STM32_DAC2

config STM32_DAC1_DMA
	bool "DAC1 DMA"
	depends on STM32_DAC1
	default n
	---help---
		If DMA is selected, then a timer and output frequency must also be
		provided to support the DMA transfer.  The DMA transfer could be
		supported by and EXTI trigger, but this feature is not currently
		supported by the driver.

if STM32_DAC1_DMA

config STM32_DAC1_TIMER
	int "DAC1 timer"
	range 2 7

config STM32_DAC1_TIMER_FREQUENCY
	int "DAC1 timer frequency"
	default 0

endif

config STM32_DAC2_DMA
	bool "DAC2 DMA"
	depends on STM32_DAC2
	default n
	---help---
		If DMA is selected, then a timer and output frequency must also be
		provided to support the DMA transfer.  The DMA transfer could be
		supported by and EXTI trigger, but this feature is not currently
		supported by the driver.

if STM32_DAC2_DMA

config STM32_DAC2_TIMER
	int "DAC2 timer"
	default 0
	range 2 7

config STM32_DAC2_TIMER_FREQUENCY
	int "DAC2 timer frequency"
	default 0

endif

config STM32_DAC_DMA_BUFFER_SIZE
	int "DAC DMA buffer size"
	default 256

endmenu

config STM32_USART
	bool

config STM32_UART4
	bool

config STM32_UART4
	bool

menu "U[S]ART Configuration"
	depends on STM32_USART

config USART1_RS485
	bool "RS-485 on USART1"
	default n
	depends on STM32_USART1
	---help---
		Enable RS-485 interface on USART1. Your board config will have to
		provide GPIO_USART1_RS485_DIR pin definition. Currently it cannot be
		used with USART1_RXDMA.

config USART1_RS485_DIR_POLARITY
	int "USART1 RS-485 DIR pin polarity"
	default 1
	range 0 1
	depends on USART1_RS485
	---help---
		Polarity of DIR pin for RS-485 on USART1. Set to state on DIR pin which
		enables TX (0 - low / nTXEN, 1 - high / TXEN).

config USART1_RXDMA
	bool "USART1 Rx DMA"
	default n
	depends on STM32_USART1 && STM32_DMA1
	---help---
		In high data rate usage, Rx DMA may eliminate Rx overrun errors

config USART2_RS485
	bool "RS-485 on USART2"
	default n
	depends on STM32_USART2
	---help---
		Enable RS-485 interface on USART2. Your board config will have to
		provide GPIO_USART2_RS485_DIR pin definition. Currently it cannot be
		used with USART2_RXDMA.

config USART2_RS485_DIR_POLARITY
	int "USART2 RS-485 DIR pin polarity"
	default 1
	range 0 1
	depends on USART2_RS485
	---help---
		Polarity of DIR pin for RS-485 on USART2. Set to state on DIR pin which
		enables TX (0 - low / nTXEN, 1 - high / TXEN).

config USART2_RXDMA
	bool "USART2 Rx DMA"
	default n
	depends on STM32_USART2 && STM32_DMA1
	---help---
		In high data rate usage, Rx DMA may eliminate Rx overrun errors

config USART3_RS485
	bool "RS-485 on USART3"
	default n
	depends on STM32_USART3
	---help---
		Enable RS-485 interface on USART3. Your board config will have to
		provide GPIO_USART3_RS485_DIR pin definition. Currently it cannot be
		used with USART3_RXDMA.

config USART3_RS485_DIR_POLARITY
	int "USART3 RS-485 DIR pin polarity"
	default 1
	range 0 1
	depends on USART3_RS485
	---help---
		Polarity of DIR pin for RS-485 on USART3. Set to state on DIR pin which
		enables TX (0 - low / nTXEN, 1 - high / TXEN).

config USART3_RXDMA
	bool "USART3 Rx DMA"
	default n
	depends on STM32_USART3 && STM32_DMA1
	---help---
		In high data rate usage, Rx DMA may eliminate Rx overrun errors

config USART4_RS485
	bool "RS-485 on USART4"
	default n
	depends on STM32_USART4
	---help---
		Enable RS-485 interface on USART4. Your board config will have to
		provide GPIO_USART4_RS485_DIR pin definition. Currently it cannot be
		used with USART4_RXDMA.

config USART4_RS485_DIR_POLARITY
	int "USART4 RS-485 DIR pin polarity"
	default 1
	range 0 1
	depends on USART4_RS485
	---help---
		Polarity of DIR pin for RS-485 on USART4. Set to state on DIR pin which
		enables TX (0 - low / nTXEN, 1 - high / TXEN).

config USART4_RXDMA
	bool "USART4 Rx DMA"
	default n
	depends on STM32_USART4 && STM32_DMA1
	---help---
		In high data rate usage, Rx DMA may eliminate Rx overrun errors

config USART5_RS485
	bool "RS-485 on USART5"
	default n
	depends on STM32_USART5
	---help---
		Enable RS-485 interface on USART5. Your board config will have to
		provide GPIO_USART5_RS485_DIR pin definition. Currently it cannot be
		used with USART5_RXDMA.

config USART5_RS485_DIR_POLARITY
	int "USART5 RS-485 DIR pin polarity"
	default 1
	range 0 1
	depends on USART5_RS485
	---help---
		Polarity of DIR pin for RS-485 on USART5. Set to state on DIR pin which
		enables TX (0 - low / nTXEN, 1 - high / TXEN).

config USART5_RXDMA
	bool "USART5 Rx DMA"
	default n
	depends on STM32_USART5 && STM32_DMA1
	---help---
		In high data rate usage, Rx DMA may eliminate Rx overrun errors

config USART6_RS485
	bool "RS-485 on USART6"
	default n
	depends on STM32_USART6
	---help---
		Enable RS-485 interface on USART6. Your board config will have to
		provide GPIO_USART6_RS485_DIR pin definition. Currently it cannot be
		used with USART6_RXDMA.

config USART6_RS485_DIR_POLARITY
	int "USART6 RS-485 DIR pin polarity"
	default 1
	range 0 1
	depends on USART6_RS485
	---help---
		Polarity of DIR pin for RS-485 on USART6. Set to state on DIR pin which
		enables TX (0 - low / nTXEN, 1 - high / TXEN).

config USART6_RXDMA
	bool "USART6 Rx DMA"
	default n
	depends on STM32_USART6 && STM32_DMA1
	---help---
		In high data rate usage, Rx DMA may eliminate Rx overrun errors

config SERIAL_TERMIOS
	bool "Serial driver TERMIOS supported"
	depends on STM32_USART1 || STM32_USART2 || STM32_USART3 || STM32_USART4 || STM32_USART5 || STM32_USART6
	default n
	---help---
		Serial driver supports termios.h interfaces (tcsetattr, tcflush, etc.).
		If this is not defined, then the terminal settings (baud, parity, etc).
		are not configurable at runtime; serial streams cannot be flushed, etc..

config SERIAL_DISABLE_REORDERING
	bool "Disable reordering of ttySx devices."
	depends on STM32_USART1 || STM32_USART2 || STM32_USART3 || STM32_USART4 || STM32_USART5 || STM32_USART6
	default n
	---help---
		NuttX per default reorders the serial ports (/dev/ttySx) so that the
		console is always on /dev/ttyS0. If more than one UART is in use this
		can, however, have the side-effect that all port mappings
		(hardware USART1 -> /dev/ttyS0) change if the console is moved to another
		UART. This is in particular relevant if a project uses the USB console
		in some configs and a serial console in other configs, but does not
		want the side effect of having all serial port names change when just
		the console is moved from serial to USB.

endmenu

config STM32_USART_SINGLEWIRE
	bool "Single wire protocol master interface (SWPMI)"
	default n
	depends on STM32_HAVE_SWPMI
	---help---
		Enable single wire UART support.  The option enables support for the
		TIOCSSINGLEWIRE ioctl in the STM32 serial driver.

menu "SPI Configuration"
	depends on STM32_SPI

config STM32_SPI_INTERRUPTS
	bool "Interrupt driver SPI"
	default n
	---help---
		Select to enable interrupt driven SPI support. Non-interrupt-driven,
		poll-waiting is recommended if the interrupt rate would be to high in
		the interrupt driven case.

config STM32_SPI_DMA
	bool "SPI DMA"
	default n
	---help---
		Use DMA to improve SPI transfer performance.  Cannot be used with STM32_SPI_INTERRUPT.

endmenu

menu "I2C Configuration"
	depends on STM32_I2C

config STM32_I2C_ALT
	bool "Alternate I2C implementation"
	default n if !STM32_PERFORMANCELINE
	default y if STM32_PERFORMANCELINE
	depends on !STM32_STM32F30XX
	---help---
		This selection enables an alternative I2C driver.  This alternate
		driver implements some rather complex workarounds for errata against
		the STM32 F103 "Performance Line".  This selection is an option
		because: (1) It has not yet been fully verified and (2) It is not
		certain that he scope of this workaround is needed only for the F103.

config STM32_I2C_DYNTIMEO
	bool "Use dynamic timeouts"
	default n
	depends on STM32_I2C

config STM32_I2C_DYNTIMEO_USECPERBYTE
	int "Timeout Microseconds per Byte"
	default 500
	depends on STM32_I2C_DYNTIMEO

config STM32_I2C_DYNTIMEO_STARTSTOP
	int "Timeout for Start/Stop (Milliseconds)"
	default 1000
	depends on STM32_I2C_DYNTIMEO

config STM32_I2CTIMEOSEC
	int "Timeout seconds"
	default 0
	depends on STM32_I2C

config STM32_I2CTIMEOMS
	int "Timeout Milliseconds"
	default 500
	depends on STM32_I2C && !STM32_I2C_DYNTIMEO

config STM32_I2CTIMEOTICKS
	int "Timeout for Done and Stop (ticks)"
	default 500
	depends on STM32_I2C && !STM32_I2C_DYNTIMEO

config STM32_I2C_DUTY16_9
	bool "Frequency with Tlow/Thigh = 16/9 "
	default n
	depends on STM32_I2C

endmenu

menu "ADC Configuration"
	depends on (STM32_STM32L4X6 || STM32_STM32L4X3 || STM32_STM32L4X1) && STM32_ADC

choice
	prompt "ADC trigger mode"
	default STM32_ADC_SWTRIG
	---help---
		Select the event that will trigger the A-to-D conversion sequence.

config STM32_ADC_SWTRIG
	bool "Software trigger"
	---help---
		A-to-D Conversion is initiated only by software via an ioctl()

endchoice # Trigger mode

endmenu

menu "SAI Configuration"
	depends on STM32_SAI

choice
	prompt "Operation mode"
	default STM32_SAI_DMA
	---help---
		Select the operation mode the SAI driver should use.

config STM32_SAI_POLLING
	bool "Polling"
	---help---
		The SAI registers are polled for events.

config STM32_SAI_INTERRUPTS
	bool "Interrupt"
	---help---
		Select to enable interrupt driven SAI support.

config STM32_SAI_DMA
	bool "DMA"
	---help---
		Use DMA to improve SAI transfer performance.

endchoice # Operation mode

choice
	prompt "SAI1 synchronization enable"
	default STM32_SAI1_BOTH_ASYNC
	depends on STM32_SAI1_A && STM32_SAI1_B
	---help---
		Select the synchronization mode of the SAI sub-blocks

config STM32_SAI1_BOTH_ASYNC
	bool "Both asynchronous"

config STM32_SAI1_A_SYNC_WITH_B
	bool "Block A is synchronous with Block B"

config STM32_SAI1_B_SYNC_WITH_A
	bool "Block B is synchronous with Block A"

endchoice # SAI1 synchronization enable

choice
	prompt "SAI2 synchronization enable"
	default STM32_SAI2_BOTH_ASYNC
	depends on STM32_SAI2_A && STM32_SAI2_B
	---help---
		Select the synchronization mode of the SAI sub-blocks

config STM32_SAI2_BOTH_ASYNC
	bool "Both asynchronous"

config STM32_SAI2_A_SYNC_WITH_B
	bool "Block A is synchronous with Block B"

config STM32_SAI2_B_SYNC_WITH_A
	bool "Block B is synchronous with Block A"

endchoice # SAI2 synchronization enable

endmenu

menu "SDIO Configuration"
	depends on STM32_SDIO

config SDIO_DMA
	bool "Support DMA data transfers"
	default y if STM32_DMA1
	depends on STM32_SDIO && STM32_DMA1
	---help---
		Support DMA data transfers.  Requires STM32_SDIO and config STM32_DMA1.

config SDIO_PRI
	hex "SDIO interrupt priority"
	default 128
	depends on ARCH_IRQPRIO && EXPERIMENTAL
	---help---
		Select SDIO interrupt priority.  Default: 128.

config SDIO_WIDTH_D1_ONLY
	bool "Use D1 only"
	default n
	---help---
		Select 1-bit transfer mode.  Default: 4-bit transfer mode.

endmenu

menu "RTC Configuration"
	depends on RTC

choice
	prompt "RTC clock source"
	default RTC_LSECLOCK

config RTC_LSECLOCK
	bool "LSE clock"
	---help---
		Drive the RTC with the LSE clock

config RTC_LSICLOCK
	bool "LSI clock"
	---help---
		Drive the RTC with the LSI clock

config RTC_HSECLOCK
	bool "HSE clock"
	---help---
		Drive the RTC with the HSE clock.

endchoice

config RTC_ADJ_MIN_USEC
	int "Minimum time delta for RTC calibration"
	default 1000
	depends on RTC_HIRES
	---help---
		The minimum time delta (in microseconds) required between the old and
		new RTC time before the RTC calibration is adjusted.  Default: 1000

config RTC_ADJ_MAX_USEC
	int "Maximum time delta for RTC calibration"
	default 2000000
	depends on RTC_HIRES
	---help---
		The maximum time delta (in microseconds) allowed between the old and
		new RTC time for RTC calibration. If the time change is larger than
		this delta, assume the time has actually changed instead of drifted.
		Default: 2000000

endmenu

if STM32_ETHMAC
menu "Ethernet MAC configuration"

config STM32_PHYADDR
	int "PHY address"
	default 1
	---help---
		The 5-bit address of the PHY on the board.  Default: 1

config STM32_PHYINIT
	bool "Board-specific PHY Initialization"
	default n
	---help---
		Some boards require specialized initialization of the PHY before it can be used.
		This may include such things as configuring GPIOs, resetting the PHY, etc.  If
		STM32_PHYINIT is defined in the configuration then the board specific logic must
		provide stm32_phyinitialize();  The STM32 Ethernet driver will call this function
		one time before it first uses the PHY.

config STM32_MII
	bool "Use MII interface"
	default n
	---help---
		Support Ethernet MII interface.

choice
	prompt "MII clock configuration"
	default STM32_MII_MCO if STM32_STM32F10XX
	default STM32_MII_MCO1 if STM32_STM32F207 || STM32_STM32F40XX
	depends on STM32_MII

config STM32_MII_MCO
	bool "Use MC0 as MII clock"
	depends on STM32_STM32F10XX
	---help---
		Use MCO to clock the MII interface.  Default:  Use MC0

config STM32_MII_MCO1
	bool "Use MC01 as MII clock"
	depends on (STM32_STM32F207 || STM32_STM32F40XX)
	---help---
		Use MCO1 to clock the MII interface.  Default:  Use MC01

config STM32_MII_MCO2
	bool "Use MC02 as MII clock"
	depends on (STM32_STM32F207 || STM32_STM32F40XX)
	---help---
		Use MCO2 to clock the MII interface.  Default:  Use MC01

config STM32_MII_EXTCLK
	bool "External MII clock"
	---help---
		Clocking is provided by external logic.  Don't use MCO for MII
		clock.  Default:  Use MC0[1]

endchoice

config STM32_AUTONEG
	bool "Use autonegotiation"
	default y
	---help---
		Use PHY autonegotiation to determine speed and mode

config STM32_ETHFD
	bool "Full duplex"
	default n
	depends on !STM32_AUTONEG
	---help---
		If STM32_AUTONEG is not defined, then this may be defined to select full duplex
		mode. Default: half-duplex

config STM32_ETH100MBPS
	bool "100 Mbps"
	default n
	depends on !STM32_AUTONEG
	---help---
		If STM32_AUTONEG is not defined, then this may be defined to select 100 MBps
		speed.  Default: 10 Mbps

config STM32_PHYSR
	int "PHY Status Register Address (decimal)"
	depends on STM32_AUTONEG
	---help---
		This must be provided if STM32_AUTONEG is defined.  The PHY status register
		address may diff from PHY to PHY.  This configuration sets the address of
		the PHY status register.

config STM32_PHYSR_ALTCONFIG
	bool "PHY Status Alternate Bit Layout"
	default n
	depends on STM32_AUTONEG
	---help---
		Different PHYs present speed and mode information in different ways.  Some
		will present separate information for speed and mode (this is the default).
		Those PHYs, for example, may provide a 10/100 Mbps indication and a separate
		full/half duplex indication. This options selects an alternative representation
		where speed and mode information are combined.  This might mean, for example,
		separate bits for 10HD, 100HD, 10FD and 100FD.

config STM32_PHYSR_SPEED
	hex "PHY Speed Mask"
	depends on STM32_AUTONEG && !STM32_PHYSR_ALTCONFIG
	---help---
		This must be provided if STM32_AUTONEG is defined.  This provides bit mask
		for isolating the 10 or 100MBps speed indication.

config STM32_PHYSR_100MBPS
	hex "PHY 100Mbps Speed Value"
	depends on STM32_AUTONEG && !STM32_PHYSR_ALTCONFIG
	---help---
		This must be provided if STM32_AUTONEG is defined.  This provides the value
		of the speed bit(s) indicating 100MBps speed.

config STM32_PHYSR_MODE
	hex "PHY Mode Mask"
	depends on STM32_AUTONEG && !STM32_PHYSR_ALTCONFIG
	---help---
		This must be provided if STM32_AUTONEG is defined.  This provide bit mask
		for isolating the full or half duplex mode bits.

config STM32_PHYSR_FULLDUPLEX
	hex "PHY Full Duplex Mode Value"
	depends on STM32_AUTONEG && !STM32_PHYSR_ALTCONFIG
	---help---
		This must be provided if STM32_AUTONEG is defined.  This provides the
		value of the mode bits indicating full duplex mode.

config STM32_PHYSR_ALTMODE
	hex "PHY Mode Mask"
	depends on STM32_AUTONEG && STM32_PHYSR_ALTCONFIG
	---help---
		This must be provided if STM32_AUTONEG is defined.  This provide bit mask
		for isolating the speed and full/half duplex mode bits.

config STM32_PHYSR_10HD
	hex "10MBase-T Half Duplex Value"
	depends on STM32_AUTONEG && STM32_PHYSR_ALTCONFIG
	---help---
		This must be provided if STM32_AUTONEG is defined.  This is the value
		under the bit mask that represents the 10Mbps, half duplex setting.

config STM32_PHYSR_100HD
	hex "100Base-T Half Duplex Value"
	depends on STM32_AUTONEG && STM32_PHYSR_ALTCONFIG
	---help---
		This must be provided if STM32_AUTONEG is defined.  This is the value
		under the bit mask that represents the 100Mbps, half duplex setting.

config STM32_PHYSR_10FD
	hex "10Base-T Full Duplex Value"
	depends on STM32_AUTONEG && STM32_PHYSR_ALTCONFIG
	---help---
		This must be provided if STM32_AUTONEG is defined.  This is the value
		under the bit mask that represents the 10Mbps, full duplex setting.

config STM32_PHYSR_100FD
	hex "100Base-T Full Duplex Value"
	depends on STM32_AUTONEG && STM32_PHYSR_ALTCONFIG
	---help---
		This must be provided if STM32_AUTONEG is defined.  This is the value
		under the bit mask that represents the 100Mbps, full duplex setting.

config STM32_ETH_PTP
	bool "Precision Time Protocol (PTP)"
	default n
	---help---
		Precision Time Protocol (PTP).  Not supported but some hooks are indicated
		with this condition.

config STM32_RMII
	bool
	default y if !STM32_MII

choice
	prompt "RMII clock configuration"
	default STM32_RMII_MCO if STM32_STM32F10XX
	default STM32_RMII_MCO1 if STM32_STM32F207 || STM32_STM32F40XX
	depends on STM32_RMII

config STM32_RMII_MCO
	bool "Use MC0 as RMII clock"
	depends on STM32_STM32F10XX
	---help---
		Use MCO to clock the RMII interface.  Default:  Use MC0

config STM32_RMII_MCO1
	bool "Use MC01 as RMII clock"
	depends on (STM32_STM32F207 || STM32_STM32F40XX)
	---help---
		Use MCO1 to clock the RMII interface.  Default:  Use MC01

config STM32_RMII_MCO2
	bool "Use MC02 as RMII clock"
	depends on (STM32_STM32F207 || STM32_STM32F40XX)
	---help---
		Use MCO2 to clock the RMII interface.  Default:  Use MC01

config STM32_RMII_EXTCLK
	bool "External RMII clock"
	---help---
		Clocking is provided by external logic.  Don't use MCO for RMII
		clock.  Default:  Use MC0[1]

endchoice

config STM32_ETHMAC_REGDEBUG
	bool "Register-Level Debug"
	default n
	depends on DEBUG
	---help---
		Enable very low-level register access debug.  Depends on DEBUG.

endmenu
endif

menu "USB Host Configuration"

config STM32_OTGFS_RXFIFO_SIZE
	int "Rx Packet Size"
	default 128
	depends on STM32_HAVE_OTGFS
	---help---
		Size of the RX FIFO in 32-bit words. Default 128 (512 bytes)

config STM32_OTGFS_NPTXFIFO_SIZE
	int "Non-periodic Tx FIFO Size"
	default 96
	depends on STM32_HAVE_OTGFS
	---help---
		Size of the non-periodic Tx FIFO in 32-bit words.  Default 96 (384 bytes)

config STM32_OTGFS_PTXFIFO_SIZE
	int "Periodic Tx FIFO size"
	default 128
	depends on STM32_HAVE_OTGFS
	---help---
		Size of the periodic Tx FIFO in 32-bit words.  Default 96 (384 bytes)

config STM32_OTGFS_DESCSIZE
	int "Descriptor Size"
	default 128
	depends on STM32_HAVE_OTGFS
	---help---
		Maximum size to allocate for descriptor memory descriptor.  Default: 128

config STM32_OTGFS_SOFINTR
	bool "Enable SOF interrupts"
	default n
	depends on STM32_HAVE_OTGFS
	---help---
		Enable SOF interrupts.  Why would you ever want to do that?

config STM32_USBHOST_REGDEBUG
	bool "Register-Level Debug"
	default n
	depends on STM32_HAVE_OTGFS
	---help---
		Enable very low-level register access debug.  Depends on DEBUG.

config STM32_USBHOST_PKTDUMP
	bool "Packet Dump Debug"
	default n
	depends on STM32_HAVE_OTGFS
	---help---
		Dump all incoming and outgoing USB packets. Depends on DEBUG.

endmenu

comment "USB Device Configuration"

menu "CAN driver configuration"
	depends on STM32_HAVE_CAN

config CAN_BAUD
	int "CAN BAUD"
	default 250000
	depends on STM32_CAN
	---help---
		CAN BAUD rate.  Required if STM32_CAN1 is defined.

config CAN_TSEG1
	int "TSEG1 quanta"
	default 6
	---help---
		The number of CAN time quanta in segment 1. Default: 6

config CAN_TSEG2
	int "TSEG2 quanta"
	default 7
	---help---
		The number of CAN time quanta in segment 2. Default: 7
endmenu

if STM32_LTDC

menu "LTDC Configuration"

config STM32_LTDC_BACKLIGHT
	bool "Backlight support"
	default y

config STM32_LTDC_DEFBACKLIGHT
	hex "Default backlight level"
	default 0xf0

config STM32_LTDC_BACKCOLOR
	hex "Background color"
	default 0x0
	---help---
		This is the background color that will be used as the LTDC
		background layer color.  It is an RGB888 format value.

config STM32_LTDC_FB_BASE
	hex "Framebuffer memory start address"
	---help---
		If you are using the the LTDC, then you must provide the address
		of the start of the framebuffer.  This address will typically
		be in the SRAM or SDRAM memory region of the FSMC.

config STM32_LTDC_FB_SIZE
	int "Framebuffer memory size (bytes)"
	default 0

choice
	prompt "Layer 1 color format"
	default STM32_LTDC_L1_RGB565

config STM32_LTDC_L1_L8
	bool "8 bpp L8 (8-bit CLUT)"

config STM32_LTDC_L1_AL44
	bool "8 bpp AL44 (4-bit alpha + 4-bit CLUT)"

config STM32_LTDC_L1_AL88
	bool "16 bpp AL88 (8-bit alpha + 8-bit CLUT)"

config STM32_LTDC_L1_RGB565
	bool "16 bpp RGB 565"

config STM32_LTDC_L1_ARGB4444
	bool "16 bpp ARGB 4444"

config STM32_LTDC_L1_ARGB1555
	bool "16 bpp ARGB 1555"

config STM32_LTDC_L1_RGB888
	bool "24 bpp RGB 888"

config STM32_LTDC_L1_ARGB8888
	bool "32 bpp ARGB 8888"

endchoice # Layer 1 color format

config STM32_LTDC_L2
	bool "Enable Layer 2 support"
	default y

if STM32_LTDC_L2

choice
	prompt "Layer 2 (top layer) color format"
	default STM32_LTDC_L2_RGB565

config STM32_LTDC_L2_L8
	bool "8 bpp L8 (8-bit CLUT)"

config STM32_LTDC_L2_AL44
	bool "8 bpp AL44 (4-bit alpha + 4-bit CLUT)"

config STM32_LTDC_L2_AL88
	bool "16 bpp AL88 (8-bit alpha + 8-bit CLUT)"

config STM32_LTDC_L2_RGB565
	bool "16 bpp RGB 565"

config STM32_LTDC_L2_ARGB4444
	bool "16 bpp ARGB 4444"

config STM32_LTDC_L2_ARGB1555
	bool "16 bpp ARGB 1555"

config STM32_LTDC_L2_RGB888
	bool "24 bpp RGB 888"

config STM32_LTDC_L2_ARGB8888
	bool "32 bpp ARGB 8888"

endchoice # Layer 2 color format

endif # STM32_LTDC_L2

endmenu

endif # STM32_LTDC

if GREYBUS
config GREYBUS_MODS_NUM_CPORTS
	int "Maximum number of CPorts"
	default 10
	---help---
		CPort numbers in the manifest must remain below this number (default 10).
endif

config GPIO_CHIP_STM32
	bool "STM32 GPIO Chip support"
	default n

config STM32_UART_DEVICE
	bool "STM32 UART device"
	default n
	depends on STM32_USART
	---help---
		Implement the device_uart interface based on the ttySx implementation.

config STM32_DFU
	bool "Select DFU Bootloader Option"
	default n
	depends on !STM32_VALUELINE
	---help---
		Configure and position code for use with the STMicro DFU bootloader.  Do
		not select this option if you will load code using JTAG/SWM.


